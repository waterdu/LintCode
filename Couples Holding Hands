N couples sit in 2N seats arranged in a row and want to hold hands. We want to know the minimum number of swaps so 
that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.
The people and seats are represented by an integer from 0 to 2N-1,
the couples are numbered in order, the first couple being (0, 1), 
the second couple being (2, 3), and so on with the last couple being (2N-2, 2N-1).
The couples' initial seating is given by row[i] being the value of the person who is initially sitting in the i-th seat.

Example 1:

Input: row = [0, 2, 1, 3]
Output: 1
Explanation: We only need to swap the second (row[1]) and third (row[2]) person.
Example 2:

Input: row = [3, 2, 0, 1]
Output: 0
Explanation: All couples are already seated side by side.
Note:

len(row) is even and in the range of [4, 60].
row is guaranteed to be a permutation of 0...len(row)-1.
//贪心暴力解on^2
class Solution(object):
    def minSwapsCouples(self, row):
        """
        :type row: List[int]
        :rtype: int
        """
        res = 0
        n = len(row)
        for i in range(0, n - 1, 2):
            if row[i+1] == (row[i] ^ 1):
                continue
            for j in range(i+1,n):
                #换第一个还是第二个实际上没有影响
                if row[j] == (row[i] ^ 1):
                    row[j], row[i + 1] = row[i + 1], row[j]
                    res+=1
        return res
  // union find 解法
  class Solution(object):
    def minSwapsCouples(self, row):
        """
        :type row: List[int]
        :rtype: int
        """
        n = len(row)
        self.father={}
        for i in range(n):
            self.father[i]=i
        res = 0
        for i in range(0, n, 2):
            x = self.find(row[i] /2)
            y = self.find(row[i+1]/2)
            if x != y:
                self.father[x] = y
                res+=1
        return res
    
    def find(self, x):
        if self.father[x] == x:
            return x 
        else:
            return self.find(self.father[x])
        
    # 使用哈希配对的方法，两个数均除以2，若相等，则为同一组，若否，
    # 则区分出较大和较小的数，若两个数存在联系，则返回，若不存在，则建立这两个数的联系。
    # 最后根据哈希表中联系的个数来得到最小交换次数，原理同上面的一样，这里的联系就是指的是顶点之间的边，
    # 每个边需要一次交换，重边算作一次，所以每次要判断两个数是否存在联系。
   
