The set [1,2,3,...,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note:

Given n will be between 1 and 9 inclusive.
Given k will be between 1 and n! inclusive.
Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"
//permutation变种解法，会超时
class Solution(object):
    def getPermutation(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: str
        """
        cache = {}
        nums = []
        for i in range(1, n+1, 1):
            nums.append(i)
        self.dfs(cache,[],nums, k)
        print(cache[k - 1])
        return "".join(str(c) for c in cache[k - 1])
    
    def dfs(self, cache, l, nums,k):
        if len(cache) >= k:
            return
        if len(l) == len(nums):
            cache[len(cache)] = list(l)
            return
        for i in nums:
            if i in l:
                continue
            l.append(i)
            self.dfs(cache,l,nums,k)
            l.pop()
            
 class Solution(object):
    # @return a string
    def getPermutation(self, n, k):
        nums,k=range(1,n+1),k-1
        ans=''
        while nums:
            f=math.factorial(len(nums)-1)
            i,k=k/f,k%f
            ans+=str(nums[i])
            nums=nums[:i]+nums[i+1:]
        return ans
            
            
            
