Given an input string , reverse the string word by word. 

Example:

Input:  ["t","h","e"," ","s","k","y"," ","i","s"," ","b","l","u","e"]
Output: ["b","l","u","e"," ","i","s"," ","s","k","y"," ","t","h","e"]
Note: 

A word is defined as a sequence of non-space characters.
The input string does not contain leading or trailing spaces.
The words are always separated by a single space.
Follow up: Could you do it in-place without allocating extra space?

class Solution {
    public void reverseWords(char[] str) {
        reverse(str, 0, str.length - 1);//reverse the whole string first;
        int r = 0;
        while (r < str.length) {
            int l = r;
            while(r < str.length && str[r] != ' ') {
                r++;
            }
            reverse(str, l, r - 1);//reverse words
            r++;
        }
    }
    
    public void reverse(char[] s, int l, int r) {
        while (l < r) {
            char tmp = s[l];
            s[l] = s[r];
            s[r] = tmp;
            l++;
            r--;
        }
    }
}
