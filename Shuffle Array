Given an array of 2n elements{a1,a2,a3...,an,b1,b2,b3,...bn}}
,how to shuffle it to {a1,b1,a2,b2,a3,b3...an,bn}

input {1,3,5,7,2,4,6,8}
output {1,2,3,4,5,6,7,8}

//O(n^2)
public static void shuffle_1(int[] nums) {
  if (nums == null || nums.length % 2 == 1){
    return;
  }
  int k = nums.length / 2;
  for (int i = 1; i < k; i++) {
    for(int j = i; i < k; j++ ){
      int temp = nums[j];
      nums[j] = nums[j - i + k];
      nums[j - i + k] = temp;
    }
  }
}

//解法2,双重rorate法
public static void shuffle_2(int[] nums) {
   if (nums == null || nums.length % 2 == 1){
    return;
    }
    
    shulffle_2(nums, 0, nums.length - 1);
}

private static void shuffle_2(int[] nums, int start, int end) {
    if(end <= start + 1){
      return;
    }
    
    int len = end - start + 1;
    rotate(nums, start + len /2 - len / 4, start + len - len/ 4 - 1, len /4);
    shulffle_2(nums, start, start + (len + 2) / 4 * 2 - 1);
    shulffle_2(nums, start + (len + 2) / 4 * 2, end);
}

private static void rotate(int[] nums, int start, int end) {
  reverse(nums, start, start + k - 1);
  reverse(nums, start + k, end);
  reverse(nums, start, end);
}

private static void reverse() {
 ...
}
