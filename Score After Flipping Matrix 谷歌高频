We have a two dimensional matrix A where each value is 0 or 1.
A move consists of choosing any row or column, and toggling each value 
in that row or column: changing all 0s to 1s, and all 1s to 0s.

After making any number of moves, every row of this matrix is interpreted as a binary number, 
and the score of the matrix is the sum of these numbers.
Return the highest possible score.

Example 1:

Input: [[0,0,1,1],[1,0,1,0],[1,1,0,0]]
Output: 39
Explanation:
Toggled to [[1,1,1,1],[1,0,0,1],[1,1,1,1]].
0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
现在需要整行或者整列的进行toggle操作。目标是进行一波toggle操作之后，把A中的每行数字转化成二进制数，是最终得到的二进制数的和最大。
初始状态：

[0,0,1,1]
[1,0,1,0]
[1,1,0,0]
1
2
3
首列置为 1：

[1,1,0,0]
[1,0,1,0]
[1,1,0,0]
1
2
3
每一列 1 的个数大于 0 的个数：

[1,1,1,1]
[1,0,0,1]
[1,1,1,1]
1
2
3
计算结果：15 + 9 + 15 = 39.

其实，最后的计算结果完全可以这么算：

=     2^3 * 3（第一列有3个1） + 2^2 * 2（第二列有2个1）
    + 2^1 * 2（第三列有2个1） + 2^0 * 3（第四列有3个1）
= 8*3 + 4*2 + 2*2 + 1*3
= 24 + 8 + 4 + 3
= 39

    def matrixScore(self, A):
        M, N = len(A), len(A[0])
        res = (1 << N - 1) * M
        for j in range(1, N):
            cur = sum(A[i][j] == A[i][0] for i in range(M)) #因为第一列一定是1
            res += max(cur, M - cur) * (1 << N - 1 - j) #想象j是N -1的时候 数是1， j是n-2的时候，数是2
        return res

