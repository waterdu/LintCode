There are N network nodes, labelled 1 to N.

Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node,
and w is the time it takes for a signal to travel from source to target.

Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

Note:
N will be in the range [1, 100].
K will be in the range [1, N].
The length of times will be in the range [1, 6000].
All edges times[i] = (u, v, w) will have 1 <= u, v <= N and 1 <= w <= 100.

#这题和飞机票题一样,想到heap
class Solution(object):
    def networkDelayTime(self, times, N, K):
        """
        :type times: List[List[int]]
        :type N: int
        :type K: int
        :rtype: int
        """
        dic = collections.defaultdict(dict)
        for fr, to, delay in times:
            dic[fr][to] = delay
        pq = [(0,K)]
        visited = {}
        while pq:
            delay, start = heapq.heappop(pq)
            if start not in visited:
                visited[start] = delay
                for to in dic[start]:
                    heapq.heappush(pq, (delay + dic[start][to], to))
        mx = max(visited.values())
        if len(visited) == N:
            return mx
        return -1
