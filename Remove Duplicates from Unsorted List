//Remove Duplicates from Unsorted List.java
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
       if(head==null || head.next == null) {
           return head;
       }    
       ListNode cur = head;
        Set<Integer> set = new HashSet<Integer>();
        set.add(cur.val);
       while(cur != null && cur.next != null){
           if(!set.add(cur.next.val)){
               cur.next = cur.next.next;
           } else {
                cur = cur.next;
           }    
       }
       return head;
    }
}


//No extra buffer: merge Sort the linked list, then loop it through

public class Solution {
    /**
     * @param head: The first node of linked list.
     * @return: head node
     */
    public ListNode removeDuplicates(ListNode head) { 
    	if (head == null) {
    		return head;
    	}
    	ListNode newHead = sort(head);
    	ListNode dummy = newHead;
    	while (newHead != null) {
    		if (newHead.next != null && newHead.val == newHead.next.val) {
    			newHead.next = newHead.next.next;
    		}
    		newHead = newHead.next;
    	}
    	return dummy;
    }  
    //Merge Sort's code

	/*
		Merge sort, using findMidle and merge.
	*/
	public ListNode sort(ListNode node) {
		if (node == null || node.next == null) {
			return node;
		}
		ListNode mid = findMiddle(node);
		ListNode right = sort(mid.next);
		mid.next = null;
		ListNode left = sort(node);
		return merge(left, right);
	}


    /*
    	Two pointer slow, fast
    	When fast pointer reaches end, return mid;
    */
    public ListNode findMiddle(ListNode node){
    	ListNode slow = node;
    	ListNode fast = node.next;
    	while (fast != null && fast.next != null) {
    		slow = slow.next;
    		fast = fast.next.next;
    	}
    	return slow;
    }

    /*
		Merge the two list based on value
    */
	public ListNode merge(ListNode n1, ListNode n2) {
		ListNode node = new ListNode(0);
		ListNode dummy = node;
		while (n1 != null && n2 != null) {
			if (n1.val < n2.val) {
				node.next = n1;
				n1 = n1.next;
			} else {
				node.next = n2;
				n2 = n2.next;
			}
			node = node.next;
		}
		if (n1 != null) {
			node.next = n1;
		}
		if (n2 != null) {
			node.next = n2;
		}
		return dummy.next;
	}
}
