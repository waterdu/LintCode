Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 # Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        res = []
        if not root:
            return []
        q = [root]
        leftToRight = True
        while q:
            nodes = list(q)
            level = [x.val for x in q]
            q = []
            for i in nodes:
                if i.left:
                    q.append(i.left)
                if i.right:
                    q.append(i.right)
                
            if not leftToRight:
                level.reverse()
            leftToRight =  not leftToRight
            res.append(level)
        return res
        
//java解法
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) { 
            return res;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        boolean leftToRight = true;
        while(!q.isEmpty()) {
            List<Integer> level = new ArrayList<>();
            int size = q.size();
            for (int i = 0; i< size; i++) {
                TreeNode cur = q.poll();
                if(leftToRight) {
                    level.add(cur.val);
                } else {
                   level.add(0, cur.val); 
                }
                if(cur.left != null) {
                    q.add(cur.left);
                }
                if(cur.right != null) {
                    q.add(cur.right);
                }
            }
            res.add(level);
            leftToRight = !leftToRight;
        }
        return res;
    }
}

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: A Tree
    @return: A list of lists of integer include the zigzag level order traversal of its nodes' values.
    """
    def zigzagLevelOrder(self, root):
        # write your code here
        if not root:
            return []
        res = []
        q = [root]
        isRightToleft = False
        while q:
            size = len(q)
            level = []
            for i in range(size):
                cur = q.pop(0)
                if isRightToleft:
                    level.insert(0, cur.val)
                else: 
                    level.append(cur.val)
                if cur.left:
                    q.append(cur.left)
                if cur.right:
                    q.append(cur.right)
            res.append(level)
            isRightToleft = not isRightToleft
        return res

