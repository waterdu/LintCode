//union find
class Solution {
    //这道题用dfs,bfs更好写，更少犯错
    public int countComponents(int n, int[][] edges) {
        //因为点是0,1,2来定义的，所以可以用array不需要用map
        int[] roots = new int[n];
        for(int i = 0; i < n; i++) {
            roots[i] = i;
        }
        
        for(int[] e:edges) {
            int root1 = find(roots, e[0]);
            int root2 = find(roots, e[1]);
            if(root1 != root2) {
                roots[root1] = root2;//union
                n--;
            }
        }
        return n;
    }
    private int find(int[] roots, int id) {
        int x = id;
        while(roots[id] != id) {
            id = roots[id];
        }
        //compression
        while (roots[x] != id) {
            int fa = roots[x];
            roots[x] = id;
            x = fa;
        }
        return id;
    }
}

//dfs解法，可以换成stack
class Solution {
    public int countComponents(int n, int[][] edges) {
        if(n <= 1){
            return n;
        }
        // node, connected neibor
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int i = 0; i < n; i++){
            map.put(i, new ArrayList<>());
        }
        for(int[] edge:edges) {
            map.get(edge[0]).add(edge[1]);
            map.get(edge[1]).add(edge[0]);
        }
        Set<Integer> visited = new HashSet<>();
        int count = 0;
        for(int i = 0; i < n; i++){
            if(visited.add(i)){
                dfs(i, map, visited);
                count++;
            }
        }
        return count;
    }
    
    private void dfs(int i, Map<Integer, List<Integer>> map, Set<Integer> visited) {
        for(int j :map.get(i)){
            if(visited.add(j)){
                dfs(j, map, visited);
            }
        }
    }
}
//BFS解法
 public int countComponents(int n, int[][] edges) {
        if (n <= 1) {
            return n;
        }
        List<List<Integer>> adjList = new ArrayList<List<Integer>>();
        for (int i = 0; i < n; i++) {
            adjList.add(new ArrayList<Integer>());
        }
        for (int[] edge : edges) {
            adjList.get(edge[0]).add(edge[1]);
            adjList.get(edge[1]).add(edge[0]);
        }
        boolean[] visited = new boolean[n];
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                count++;
                Queue<Integer> queue = new LinkedList<Integer>();
                queue.offer(i);
                while (!queue.isEmpty()) {
                    int index = queue.poll();
                    visited[index] = true;
                    for (int next : adjList.get(index)) {
                        if (!visited[next]) {
                            queue.offer(next);
                        }
                    }
                }
            }
        }
        
        return count;
    }
