//O(n) solution

class TicTacToe {
    private int[] rows;
    private int[] cols;
    private int diagonal;
    private int antiDiagonal;

    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        rows = new int[n];
        cols = new int[n];
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    
    //player 1 is to
    public int move(int row, int col, int player) {
        int toAddScore = player == 1? 1: -1; //so if abs is 3, there's a winner
        //if each value abs is 3
        rows[row] += toAddScore;
        cols[col] += toAddScore;
        if(row == col) {
            diagonal += toAddScore;
        }
        if(col + row == rows.length - 1) {
            antiDiagonal += toAddScore;
        }
        
        int size = rows.length;
        //check winner
        if(Math.abs(rows[row]) == size ||
          Math.abs(cols[col]) == size ||
          Math.abs(diagonal) == size  ||
            Math.abs(antiDiagonal) == size){
            return player;
            
        }
        return 0;// 0 means no winner
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */
