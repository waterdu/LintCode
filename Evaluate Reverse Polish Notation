public class Solution {
    /*
     * @param tokens: The Reverse Polish Notation
     * @return: the value
     */
    public int evalRPN(String[] tokens) {
        // write your code here
        if (tokens == null || tokens.length == 0) {
            return 0;
        }
        String operators = "+-*/";
        Stack<Integer> stack = new Stack<>();
        
        for (String s:tokens) {
            if(!operators.contains(s)) {
                stack.push(Integer.valueOf(s));
                continue;
            }
            int a = stack.pop();
            int b = stack.pop();
            if (s.equals("+")) {
                stack.push(b + a);
            } else if (s.equals("-")) {
                stack.push(b - a);
            } else if (s.equals("*")) {
                stack.push(b * a);
            } else {
                stack.push(b / a);
            }
        }
        return stack.pop();
    }
}

//python解法

class Solution:
    """
    @param: tokens: The Reverse Polish Notation
    @return: the value
    """
    def evalRPN(self, tokens):
        # write your code here
        stack = []
        for i in tokens:
            if i not in ('+', '-', '*', '/'):
                stack.append(int(i))
            else:
                op2 = stack.pop()
                op1 = stack.pop()
                if i == '+':
                    stack.append(op1 + op2)
                elif i == '-':
                    stack.append(op1 - op2)
                elif i == '*':
                    stack.append(op1 * op2)
                else:
                    stack.append(int(op1 * 1.0 / op2))
        return stack[0]
