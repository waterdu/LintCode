/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */

public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        return clone(node, new HashMap<>());
    }
    private UndirectedGraphNode clone(UndirectedGraphNode node, Map<UndirectedGraphNode, UndirectedGraphNode> clones){
        if(node == null) {
            return null;
        }
        UndirectedGraphNode clone = clones.get(node);
        if(clone != null) {
            return clone;
        } 
        clone = new UndirectedGraphNode(node.label);
        clones.put(node, clone);
        for(UndirectedGraphNode neighbor:node.neighbors) {
            clone.neighbors.add(clone(neighbor, clones));
        }
        return clone;
    }
}
//xcode 
public class Solution {
    /*
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if (node == null){
            return null;
        }
        
        //  original             ,clone
        Map<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<>();
        Queue<UndirectedGraphNode> q = new LinkedList<>();
        q.add(node);
        UndirectedGraphNode graphCopy = new UndirectedGraphNode(node.label);
        map.put(node, graphCopy);
        
        //clone node first
        while(!q.isEmpty()){
            UndirectedGraphNode cur = q.poll();
            UndirectedGraphNode clone = map.get(cur);
            for (UndirectedGraphNode neighbor: cur.neighbors) {
                UndirectedGraphNode copy = map.computeIfAbsent(neighbor, k -> {
                    q.add(k);
                    return new UndirectedGraphNode(k.label);  
                });
                clone.neighbors.add(copy);
            }      
        }
        
        return graphCopy;
    }
}

public class Solution {
    /*
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if (node == null){
            return null;
        }
        Map<UndirectedGraphNode, UndirectedGraphNode> map =
            new HashMap<>();
        ArrayList<UndirectedGraphNode> nodes = 
            new ArrayList<UndirectedGraphNode>();
        nodes.add(node);
        int startIndex = 0;
        map.put(node, new UndirectedGraphNode(node.label));
        
        //clone node first
        while(startIndex < nodes.size()){
            UndirectedGraphNode current = nodes.get(startIndex);
            for (UndirectedGraphNode neighbor:current.neighbors){
                if (!map.containsKey(neighbor)){
                    map.put(neighbor, new UndirectedGraphNode(neighbor.label));
                    nodes.add(neighbor);
                }
            }
            startIndex++;
        }
        
        //connect the cloned node
        for (UndirectedGraphNode current:nodes) {
            UndirectedGraphNode newNode = map.get(current);
            for (UndirectedGraphNode neibor:current.neighbors) {
                newNode.neighbors.add(map.get(neibor));
            }
        }
        
        return map.get(node);
    }
}
