Given the head of a graph, return a deep copy (clone) of the graph. Each node in the graph contains a label (int)
and a list (List[UndirectedGraphNode]) of its neighbors. There is an edge between the given node and each of the nodes in its neighbors.

OJ's undirected graph serialization (so you can understand error output):
Nodes are labeled uniquely.
We use # as a separator for each node, and ,
as a separator for node label and each neighbor of the node.
 
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
 

Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/
Note: The information about the tree serialization is only meant so that you can understand error output if you get a wrong answer. You don't need to understand the serialization to solve the problem.

# Definition for a undirected graph node
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []

class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        if not node:
            return None
        queue = collections.deque([node])
        copy = {}
        
        # copy
        while queue:
            cur = queue.popleft()
            if cur in copy:
                continue
            copy[cur] = UndirectedGraphNode(cur.label)
            for neibo in cur.neighbors:
                queue.append(neibo)

        #connect
        for k,v in copy.items():
            for neib in k.neighbors:
                v.neighbors.append(copy[neib])
                

public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        return clone(node, new HashMap<>());
    }
    private UndirectedGraphNode clone(UndirectedGraphNode node, Map<UndirectedGraphNode, UndirectedGraphNode> clones){
        if(node == null) {
            return null;
        }
        UndirectedGraphNode clone = clones.get(node);
        if(clone != null) {
            return clone;
        } 
        clone = new UndirectedGraphNode(node.label);
        clones.put(node, clone);
        for(UndirectedGraphNode neighbor:node.neighbors) {
            clone.neighbors.add(clone(neighbor, clones));
        }
        return clone;
    }
}
//xcode 
public class Solution {
    /*
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if (node == null){
            return null;
        }
        
        //  original             ,clone
        Map<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<>();
        Queue<UndirectedGraphNode> q = new LinkedList<>();
        q.add(node);
        UndirectedGraphNode graphCopy = new UndirectedGraphNode(node.label);
        map.put(node, graphCopy);
        
        //clone node first
        while(!q.isEmpty()){
            UndirectedGraphNode cur = q.poll();
            UndirectedGraphNode clone = map.get(cur);
            for (UndirectedGraphNode neighbor: cur.neighbors) {
                UndirectedGraphNode copy = map.computeIfAbsent(neighbor, k -> {
                    q.add(k);
                    return new UndirectedGraphNode(k.label);  
                });
                clone.neighbors.add(copy);
            }      
        }
        
        return graphCopy;
    }
}

public class Solution {
    /*
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if (node == null){
            return null;
        }
        Map<UndirectedGraphNode, UndirectedGraphNode> map =
            new HashMap<>();
        ArrayList<UndirectedGraphNode> nodes = 
            new ArrayList<UndirectedGraphNode>();
        nodes.add(node);
        int startIndex = 0;
        map.put(node, new UndirectedGraphNode(node.label));
        
        //clone node first
        while(startIndex < nodes.size()){
            UndirectedGraphNode current = nodes.get(startIndex);
            for (UndirectedGraphNode neighbor:current.neighbors){
                if (!map.containsKey(neighbor)){
                    map.put(neighbor, new UndirectedGraphNode(neighbor.label));
                    nodes.add(neighbor);
                }
            }
            startIndex++;
        }
        
        //connect the cloned node
        for (UndirectedGraphNode current:nodes) {
            UndirectedGraphNode newNode = map.get(current);
            for (UndirectedGraphNode neibor:current.neighbors) {
                newNode.neighbors.add(map.get(neibor));
            }
        }
        
        return map.get(node);
    }
}
