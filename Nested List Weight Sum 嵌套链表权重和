Given a nested list of integers, return the sum of all integers in the list weighted by their depth.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:
Given the list [[1,1],2,[1,1]], return 10. (four 1's at depth 2, one 2 at depth 1)

Example 2:
Given the list [1,[4,[6]]], return 27. (one 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4*2 + 6*3 = 27)

def depthSum(self, nestedList):
    if not nestedList:
        return 0
    stack = []
    sum = 0
    for n in nestedList:
        stack.append((n, 1))
    while stack:
        next, depth = stack.pop(0)
        if next.isInteger():
            sum+=depth * next.getInteger()
        else:
            for i in next.getList():
                stack.append((i, depth+1))
    return sum
    
def depthSum(self, nestedList):
    return dfs(self, nestedList,1)
def dfs(self, nestedList, depth):
    res = 0
    for n in nestedList:
        if n.isInteger():
            res += depth * n.getInteger()
        else:
            res += self.dfs(n.getList(), depth + 1)
    return res
