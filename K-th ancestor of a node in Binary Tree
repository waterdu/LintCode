
Given a binary tree in which nodes are numbered from 1 to n. Given a node and a positive integer K.
We have to print the K-th ancestor of the given node in the binary tree. If there does not exist any such ancestor then print -1.

    1
   2 3
 4  5
For example in the below given binary tree, 2nd ancestor of node 4 and 5 is 1. 3rd ancestor of node 4 will be -1.
bfs扫下去，把祖先存起来
def kthAncestor(root, n, k, node):
    #create array to store 1st ancestors
    ancestors = [0] * (n + 1)
    def generateArray(root, ancestors):
        q = [root]
        while q:
          cur = q.pop(0)
         
          if cur.left:
            ancestors[cur.left.data] = cur.data
            q.append(cur.left)
          if cur.right:
            ancestors[cur.right.data] = cur.data
            q.append(cur.right)
    
    count = 0
    while node != -1:
        node = ancestors[node]
        count+=1
        if count == k:
          break
    return node
        
//java解法
static void generateArray(Node root, int ancestors[])  
{  
    // There will be no ancestor of root node  
    ancestors[root.data] = -1;  
  
    // level order traversal to  
    // generate 1st ancestor  
    Queue<Node> q = new LinkedList<Node> ();  
    q.add(root);  
  
    while(!q.isEmpty())  
    {  
        Node temp = q.peek();  
        q.remove();  
  
        if (temp.left != null)  
        {  
            ancestors[temp.left.data] = temp.data;  
            q.add(temp.left);  
        }  
  
        if (temp.right != null)  
        {  
            ancestors[temp.right.data] = temp.data;  
            q.add(temp.right);  
        }  
    }  
}  
  
// function to calculate Kth ancestor  
static int kthAncestor(Node root, int n, int k, int node)  
{  
    // create array to store 1st ancestors  
    int ancestors[] = new int[n + 1];  
  
    // generate first ancestor array  
    generateArray(root,ancestors);  
  
    // variable to track record of number of  
    // ancestors visited  
    int count = 0;  
  
    while (node!=-1)  
    {  
        node = ancestors[node];  
        count++;  
  
        if(count==k)  
            break;  
    }  
  
    // print Kth ancestor  
    return node;  
}  
