// Given a sequence of nonnegative integers A and an integer T, return whether there is a *continuous sequence* of A that sums up to exactly T

// Example:
// [23, 5, 4, 7, 2, 11], 20. Return True because 7 + 2 + 11 = 20
// [1, 3, 5, 23, 2], 8. Return True because 3 + 5 = 8
// [1, 3, 5, 23, 2], 7 Return False because no sequence in this array adds up to 7

 int subArraySum(int arr[], int n, int target) 
    {
        int sum = arr[0], start = 0, i;
 
        // Pick a starting point
        for (i = 1; i <= n; i++) 
        {
            // If curr_sum exceeds the sum, then remove the starting elements
            while (sum > target && start < i-1)
            {
                sum = sum - arr[start];
                start++;
            }
             
            // If curr_sum becomes equal to sum, then return true
            if (sum == target) 
            {
                int p = i-1;
                System.out.println("Sum found between indexes " + start
                        + " and " + p);
                return 1;
            }
             
            // Add this element to curr_sum
            if (i < n) {
              sum = sum + arr[i];
            }   
        }
 
        System.out.println("No subarray found");
        return 0;
    }
