/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
//Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null) {
            return true;
        }
        return isSymmetric(root.left, root.right);
    }
    
    private boolean isSymmetric(TreeNode left, TreeNode right) {
        if(left == null && right == null) {
            return true;
        }
        if(left == null || right == null || left.val != right.val) {
            return false;
        }
    
        return isSymmetric(left.right, right.left) && isSymmetric(left.left, right.right);
    }
}

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: root of the given tree
    @return: whether it is a mirror of itself 
    """
    def isSymmetric(self, root):
        # Write your code here
        if not root:
            return True
        return self.checkSymmetric(root.left, root.right)
    
    def checkSymmetric(self, left, right):
        if not left and not right:
            return True
        if not left or not right or left.val != right.val:
            return False
        
        return self.checkSymmetric(left.right, right.left) and self.checkSymmetric(left.left, right.right)
