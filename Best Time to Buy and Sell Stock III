class Solution {
    public int maxProfit(int[] prices) {
        //需要你O(n) 解法
        //从左往右扫，再从右往左扫
        if(prices == null || prices.length == 0) {
            return 0;
        }
        int[] profit = new int[prices.length];
        profit[0] = 0;
        int minPrice = prices[0];
        for(int i = 1; i < prices.length; i++) {
            profit[i] = Math.max(profit[i - 1], prices[i] - minPrice);
            minPrice = Math.min(minPrice, prices[i]);
        }
        //sell is the second time sell price
        int sell = prices[prices.length - 1];
        int bestPrice = 0;
        for(int i = prices.length - 2; i >= 0;i--) {
            bestPrice = Math.max(bestPrice, sell - prices[i] + profit[i]);
            sell = Math.max(sell, prices[i]);
        }
        return bestPrice;
    }
}

Python解法
class Solution:
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        n = len(prices)
        if n <= 1:
            return 0
        p1 = [0] * n
        p2 = [0] * n
        
        minV = prices[0]
        for i in range(1,n):
            minV = min(minV, prices[i])
            p1[i] = max(prices[i] - minV, p1[i - 1])
        
        maxV = prices[-1]
        for i in range(n-2, -1, -1):
            maxV = max(maxV, prices[i])
            p2[i] = max(p2[i + 1], maxV - prices[i])
        
        res = 0
        for i in range(n):
            res = max(res, p1[i] + p2[i])
        return res
