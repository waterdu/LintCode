You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
dfs解法
class Solution(object):
    def minDistance(self, word1, word2):
        l1 = len(word1)
        l2 = len(word2)
        dp = [[-1] * (l2 + 1) for i in range(l1 + 1)]
        return self.getDistance(word1, word2, dp, l1, l2)
    
    def getDistance(self, word1, word2, dp, l1, l2):
        if not l1:
            return l2
        if not l2:
            return l1
        if dp[l1][l2] >= 0:
            return dp[l1][l2]
        res = 0
        if word1[l1 - 1] == word2[l2 - 1]:
            res = self.getDistance(word1, word2, dp, l1 - 1, l2 - 1)
        else:
            res = min(self.getDistance(word1, word2, dp, l1, l2 - 1),
                     self.getDistance(word1, word2, dp, l1 - 1, l2 - 1),
                     self.getDistance(word1, word2, dp, l1 - 1, l2))+1
        dp[l1][l2] = res
        return res
        
//dp解法
class Solution(object):
    def minDistance(self, word1, word2):
        l1 = len(word1)
        l2 = len(word2)
        dp = [[0] * (l2 + 1) for i in range(l1 + 1)]
        for i in range(l1 + 1):
            dp[i][0] = i
        for j in range(l2 + 1):
            dp[0][j] = j
        for i in range(1, l1+1):
            for j in range(1, l2+1):
                if word1[i - 1] == word2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1]
                else:
                    dp[i][j] = min(dp[i - 1][j],
                                  dp[i - 1][j - 1],
                                  dp[i][j - 1]) + 1
        return dp[l1][l2]
            
