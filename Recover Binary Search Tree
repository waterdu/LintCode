Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Example 1:

Input: [1,3,null,null,2]

   1
  /
 3
  \
   2

Output: [3,1,null,null,2]

   3
  /
 1
  \
   2
Example 2:

Input: [3,1,4,null,null,2]

  3
 / \
1   4
   /
  2

Output: [2,1,4,null,null,3]

  2
 / \
1   4
   /
  3
Follow up:

A solution using O(n) space is pretty straight forward.
Could you devise a constant space solution?

class Solution(object):
    def dfs(self, root):
        if root is None:
            return 
        
        self.dfs(root.left)

        if self.prev is not None and self.first is None and self.prev.val >= root.val:
            self.first = self.prev
        
        if self.first is not None and self.prev.val >= root.val:
            self.sec = root
        
        self.prev = root
        
        self.dfs(root.right)
    
    
    def recoverTree(self, root):
        """
        :type root: TreeNode
        :rtype: None Do not return anything, modify root in-place instead.
        """
        if root is None:
            return 
        
        self.prev = None
        self.first = None
        self.sec = None
        
        self.dfs(root)
        #print(self.first.val, self.sec.val)
        
        self.first.val, self.sec.val = self.sec.val, self.first.val
