Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.

Example 1:
Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 9

Output: True
Example 2:
Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 28

Output: False

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def findTarget(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: bool
        """
        visited = set()
        def dfs(root, visited, k):
            if not root:
                return False
            target = k - root.val
            if target in visited:
                return True
            visited.add(root.val)
            return dfs(root.left, visited, k) or dfs(root.right, visited, k)
        
        return dfs(root,visited, k)
   //也可以用Bfs做，就不多赘述了
