You have a list of words and a pattern, and you want to know which words in words matches the pattern.
A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), 
we get the desired word.
(Recall that a permutation of letters is a bijection from letters to letters: 
every letter maps to another letter, and no two letters map to the same letter.)
Return a list of the words in words that match the given pattern. 

You may return the answer in any order.

Example 1:

Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,
since a and b map to the same letter.
#把patern转化为自己的数字pattern
#第一个出现的字母为0
比如abb就是011,dkd就是010

class Solution(object):
    def findAndReplacePattern(self, words, pattern):
        """
        :type words: List[str]
        :type pattern: str
        :rtype: List[str]
        """
        def myP(s):
            count = 0
            m = {}
            for c in s:
                if c not in m:
                    m[c] = count
                    count+=1
            return [m[c] for c in s]
        res = []
        patternP = myP(pattern)
        for w in words:
            if myP(w) == patternP:
                res.append(w)
        return res
        
