Given a binary tree, return all duplicate subtrees. For each kind of duplicate subtrees, 
you only need to return the root node of any one of them.
Two trees are duplicate if they have the same structure with same node values.

Example 1:

        1
       / \
      2   3
     /   / \
    4   2   4
       /
      4
The following are two duplicate subtrees:

      2
     /
    4
and

    4
 # Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def findDuplicateSubtrees(self, root):
        """
        :type root: TreeNode
        :rtype: List[TreeNode]
        """
        #记录每一颗子树的先序/后序便利结果，然后比较看有没有重复的，有重复的就可以加入
        dic = {}
        res = []
        self.dfs(root, dic, res)
        return res
    
    def dfs(self, root, dic, res):
        if not root:
            return "#"
        serial = str(root.val) + self.dfs(root.left, dic, res) + "," + self.dfs(root.right, dic, res) 
        if serial in dic and dic[serial] == 1:#检查是否1可以避免重复加1
            res.append(root)
        dic[serial] = dic.get(serial, 0) + 1
        return serial
    
