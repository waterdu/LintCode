public class Solution {
    /*
     * @param n: Given the range of numbers
     * @param k: Given the numbers of combinations
     * @return: All the combinations of k numbers out of 1..n
     */
    public List<List<Integer>> combine(int n, int k) {
        // write your code here
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> current = new ArrayList<>();
        dfs(result, current, n,k,1);
        return result;
    }
    private void dfs(List<List<Integer>> result, List<Integer> current,
    int n, int k, int start) {
        if(current.size() == k) {
            result.add(new ArrayList<>(current));
            return;
        }
        
        for(int i = start; i <= n; i++) {
            current.add(i);
            dfs(result, current, n, k, i + 1);
            current.remove(current.size() - 1);
        }
    }
}
