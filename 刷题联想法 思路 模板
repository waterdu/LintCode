dfs：只要是有关一个元素要么放要么不放
如果一个题有很多种答案，那么往往用dfs做。求其中一种就是有答案了立马return，求所有就是不需要立马return
然后用cache来加速，可以转换成dp题型

dp：只要是dfs基本可以换成dp
最简单的动态规划类型
给定一个序列或网络
1 问是否存在
2 问最大种类
3 计数

dp分析：
1 确定状态，从最后一步结果向前分析一步
2 思考需要多少满足条件
3 想初始条件和边界问题

看起来像hashmap的题，实际上都是cache记忆化题，用cache = {}来做，dfs也可以用memorized solution来做

Tree题想到devide and concor, bfs,dfs,dfs不爆栈解法就用stack数据库
BST就要联想到inorder traversal

dfs问题里的检查a + b = sum?类题，最好换成检查if target - sum <0 来减少计算量，每次把越来越小的数传进去
因为cache(key)要保持越来越小，不要越来越大

如果一道题给出了范围和最小值，很有可能是用二分法做

Sliding Window问题集：
https://leetcode.com/problems/find-all-anagrams-in-a-string/discuss/92007/Sliding-Window-algorithm-template-to-solve-all-the-Leetcode-substring-search-problem.

并查集union find:
    def find(self, x, father):
        while father[x] != -1: #或者 != 
            x= father[x]
        return x
    def union (a,b):
        rootA = find(a)
        rootB = find(b)
        if rootA != rootB:
            father[rootA] = rootB
大部分带图的题
1 查询两个元素是否在同一个集合内
2 合并两个元素所在的集合
3 查询某个元素所在的集合的元素个数
4 查询当前集合的个数


Trie问题， 需要的时候
需要一个一个字母遍历，需要节约空间，需要找前缀
1 Trie直接实现
用map实现
2 利用Trie的前缀特性
3 字符搜索
