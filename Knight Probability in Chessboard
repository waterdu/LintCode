class Solution {
    int[][] moves = {{1, 2}, {1, -2}, {2, 1}, {2, -1}, {-1, 2}, {-1, -2}, {-2, 1}, {-2, -1}};
    public double knightProbability(int N, int K, int r, int c) {
        // I will use dp to solve this questions.I will only count if the knight move out of the board
        double[][][] dp = new double[K + 1][N][N];//how many possible ways 
        return dfs(dp, N, K, r, c)/Math.pow(8.0, K);
    }
    private double dfs(double[][][] dp, int N, int k, int r, int c) {
        //if knight out of board, return 0
        if (r < 0 || r >= N || c < 0 || c >= N) {
            return 0;
        }    
        if (k == 0) {
            return 1;
        } 
        //if searched before
        if (dp[k][r][c] != 0.0){
            return dp[k][r][c];
        }
        for (int i = 0; i < 8; i++) {
            dp[k][r][c] += dfs(dp, N, k-1, r+moves[i][0], c+moves[i][1]);
        }    
        return dp[k][r][c]; 
    }
   
}
