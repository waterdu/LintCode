Some people will make friend requests. The list of their ages is given and ages[i] is the age of the ith person. 
Person A will NOT friend request person B (B != A) if any of the following conditions are true:

age[B] <= 0.5 * age[A] + 7
age[B] > age[A]
age[B] > 100 && age[A] < 100
Otherwise, A will friend request B.

Note that if A requests B, B does not necessarily request A.  Also, people will not friend request themselves.

How many total friend requests are made?

Example 1:

Input: [16,16]
Output: 2
Explanation: 2 people friend request each other.
Example 2:

Input: [16,17,18]
Output: 2
Explanation: Friend requests are made 17 -> 16, 18 -> 17.
Example 3:

Input: [20,30,100,110,120]
Output: 
Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.
把上面的约束条件理解清楚之后就很简单了。首先我们需要统计个数，然后肯定需要进行排序，然后遍历标记为A，查找满足他的申请条件的B有多少。
对于A,B他们之间有多少对申请？如果A!=B，那么A要向每个B进行申请；如果A==B，那么A要向和他年龄一样大的其他人申请。
class Solution(object):
    def numFriendRequests(self, ages):
        """
        :type ages: List[int]
        :rtype: int
        """
        counter = collections.Counter(ages)
        ages = sorted(counter.keys())
        N = len(ages)
        res = 0
        for A in ages:
            for B in range(int(0.5*A) + 7 + 1, A + 1):
                res += counter[A] * (counter[B] - int(A == B))
        return res

直接解法
class Solution(object):
    def numFriendRequests(self, ages):
        """
        :type ages: List[int]
        :rtype: int
        """
        counter = collections.Counter(ages)
        res = 0
        for i in counter:
            for j in counter:
                if i == j:
                    if self.canRequst(i,i):
                        res += counter[i] * (counter[i] - 1)
                else:
                    if self.canRequst(j, i):
                        res += counter[i] * counter[j]
        return res
    
    def canRequst(self, b, a):
        return False if (b<= int(0.5*a)+7) or b>a or (b>100 and a<100) else True
