/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    private static final Comparator<Interval> comparator =
        new Comparator<Interval>() {
            public int compare(Interval i1, Interval i2){
                if(i1.start != i2.start) {
                    return Integer.compare(i1.start, i2.start);
                }
                return Integer.compare(i1.end, i2.end);
            }
        };
    
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> result = new ArrayList<>();
        if(intervals == null || intervals.isEmpty()) {
            return result;
        }
        Collections.sort(intervals, comparator);
        Interval last = intervals.get(0);
        result.add(last);
        for (int i = 1; i < intervals.size(); i++) {
            Interval cur = intervals.get(i);
            if (cur.start <= last.end) {
                last.end = Math.max(cur.end, last.end);
            } else {
                result.add(cur);
                last = cur;
            }
        }
        return result;
    }
}
