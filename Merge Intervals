Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.


/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
 
 //follow up如果输入的intervals的开闭口不一致，怎么优化
 大概意思就是输入的不是[1,5] [2, 4] [4, 7] 这种闭口
可能是[1,2) [2, 5] (5,8] 这种可能不能merge的
先问怎么弄输入格式，再问怎么做。
# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: List[Interval]
        """
        if not intervals or len(intervals) == 1:
            return intervals
        intervals.sort(key = lambda i:i.start)
        res = []
        #  ----
        #    ----
        #        ---
        for i in intervals:
            if res and res[-1].end >= i.start:
                res[-1].end = max(res[-1].end, i.end)
            else:
                res.append(i)
                
//解法2
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: List[Interval]
        """
        if not intervals or len(intervals) == 1:
            return intervals
        intervals.sort(key = lambda i:i.start)
        res = []
        cur = intervals[0]
        #  ----
        #    ----
        #        ---
        for i in range(1,len(intervals),1):
            nex = intervals[i]
            if cur.end >= nex.start:
                cur.end = max(cur.end, nex.end)
            else:
                res.append(cur)
                cur = nex
        if cur:
            res.append(cur)
        return res


class Solution {
    private static final Comparator<Interval> comparator =
        new Comparator<Interval>() {
            public int compare(Interval i1, Interval i2){
                if(i1.start != i2.start) {
                    return Integer.compare(i1.start, i2.start);
                }
                return Integer.compare(i1.end, i2.end);
            }
        };
    
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> result = new ArrayList<>();
        if(intervals == null || intervals.isEmpty()) {
            return result;
        }
        Collections.sort(intervals, comparator);
        Interval last = intervals.get(0);
        result.add(last);
        for (int i = 1; i < intervals.size(); i++) {
            Interval cur = intervals.get(i);
            if (cur.start <= last.end) {
                last.end = Math.max(cur.end, last.end);
            } else {
                result.add(cur);
                last = cur;
            }
        }
        return result;
    }
}
