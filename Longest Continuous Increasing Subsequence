Given an unsorted array of integers, find the length of longest continuous increasing subsequence (subarray).

Example 1:
Input: [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. 
Even though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4. 
Example 2:
Input: [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2], its length is 1. 
Note: Length of the array will not exceed 10,000.

class Solution(object):
    def findLengthOfLCIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        res = 0
        count = 0
        for i,n in enumerate(nums):
            if i != 0 and n > nums[i - 1]:
                count+=1
            else:
                count = 1
            res = max(res, count)
        return res
                
//java解法
class Solution {
    public int findLengthOfLCIS(int[] nums) {
        int res = 0;
        int count = 0;
        for(int i = 0; i < nums.length; i++){
            if(i != 0 && nums[i] > nums[i - 1]) {
                count++;
            } else {
                count = 1;
            } 
            res = Math.max(res, count);
        }
        return res;
    }
}
