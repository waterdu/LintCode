We have a list of bus routes. Each routes[i] is a bus route that the i-th bus repeats forever. For example if routes[0] = [1, 5, 7], 
this means that the first bus (0-th indexed) travels in the sequence 1->5->7->1->5->7->1->... forever.

We start at bus stop S (initially not on a bus), and we want to go to bus stop T. Travelling by buses only, 
what is the least number of buses we must take to reach our destination? Return -1 if it is not possible.

Example:
Input: 
routes = [[1, 2, 7], [3, 6, 7]]
S = 1
T = 6
Output: 2
Explanation: 
The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.

求最短需要几个公交，就是bfs的写法
class Solution(object):
    def numBusesToDestination(self, routes, S, T):
        toRoutes = collections.defaultdict(set)
        for i, route in enumerate(routes):
            for j in route:
                toRoutes[j].add(i) # i is bus number
                #  1,(0,1)
                #  2, (0,1)
        q = [(S,0)] 
        visited = set([S])
        
        for stop, bus in q:
            if stop == T:
                return bus
            for b in toRoutes[stop]:
                for nextStop in routes[b]:
                    if nextStop not in visited:
                        q.append((nextStop, bus + 1))
                        visited.add(nextStop)
                routes[b] = []
        return -1
 
 class Solution(object):
    def numBusesToDestination(self, routes, S, T):
        toRoutes = collections.defaultdict(set)
        for i, route in enumerate(routes):
            for j in route:
                toRoutes[j].add(i) # i is bus number
                #  1,(0,1)
                #  2, (0,1)
        q = collections.deque()
        q.append((S, 0))
        visited = set([S])
        
        while q:
            stop, bus = q.popleft()
            if stop == T:
                return bus
            for b in toRoutes[stop]:
                for nextStop in routes[b]:
                    if nextStop not in visited:
                        q.append((nextStop, bus + 1))
                        visited.add(nextStop)
                routes[b] = []

        return -1

