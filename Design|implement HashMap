class MyHashMap(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.size = 100
        self.buckets = [[] for i in range(self.size)]
        

    def put(self, key, value):
        """
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: void
        """
        index = hash(key) % self.size
        
        bucket = self.buckets[index]
        #tuple(key, value)
        for index, valueTuple in enumerate(bucket):
            if valueTuple[0] == key:
                bucket[index] = (key,value)
                return
        bucket.append((key,value))
            
    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """
        index = hash(key) % self.size
        bucket = self.buckets[index]
        for i in bucket:
            if i[0] == key:
                return i[1]
        
        return -1

        

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: void
        """
        index = hash(key) % self.size
        bucket = self.buckets[index]
        for index, tup in enumerate(bucket):
            if tup[0] == key:
                del bucket[index]
        



# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)
