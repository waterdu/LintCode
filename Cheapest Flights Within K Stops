There are n cities connected by m flights. Each fight starts from city u and arrives at v with a price w.
Now given all the cities and flights, together with starting city src and the destination dst, 
your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.

Example 1:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 1
Output: 200
Explanation: 
The graph looks like this:


The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.
Example 2:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 0
Output: 500
Explanation: 
The graph looks like this:


The cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture.
Note:

The number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1.
The size of flights will be in range [0, n * (n - 1) / 2].
The format of each flight will be (src, dst, price).
The price of each flight will be in the range [1, 10000].
k is in the range of [0, n - 1].
There will not be any duplicated flights or self cycles.

这题用bfs非常难处理，所以想pirority queue的解法
class Solution(object):
    def findCheapestPrice(self, n, flights, src, dst, K):
        f = collections.defaultdict(dict)
        for a, b, p in flights:
            f[a][b] = p
        heap = [(0, src, K + 1)]
        visited = set()
        while heap:
            p, i, k = heapq.heappop(heap)
            visited.add(i)
            if i == dst:
                return p
            if k > 0:
                for j in f[i]:
                    if j not in visited:
                        heapq.heappush(heap, (p + f[i][j], j, k - 1))
        return -1

class Solution(object):
    def findCheapestPrice(self, n, flights, src, dst, K):
        #k 是最多可以停多少次
        f = collections.defaultdict(dict)
        for fromA, toB, price in flights:
            f[fromA][toB] = price
        # (price, stop, 已经停了多少次)
        heap = [(0, src, K + 1)]
        visited = set()
        while heap:
            price, i, curK = heapq.heappop(heap)
            visited.add(i)
            if i == dst:
                return price
            if curK > 0:
                for j in f[i]:
                    if j not in visited:
                        heapq.heappush(heap, (price + f[i][j], j, curK - 1))
        return -1
