N cars are going to the same destination along a one lane road.  The destination is target miles away.
Each car i has a constant speed speed[i] (in miles per hour), and initial position position[i] miles towards the target along the road.
A car can never pass another car ahead of it, but it can catch up to it, and drive bumper to bumper at the same speed.
The distance between these two cars is ignored - they are assumed to have the same position.
A car fleet is some non-empty set of cars driving at the same position and same speed.  Note that a single car is also a car fleet.
If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.

How many car fleets will arrive at the destination?

Example 1:

Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
Output: 3
Explanation:
The cars starting at 10 and 8 become a fleet, meeting each other at 12.
The car starting at 0 doesn't catch up to any other car, so it is a fleet by itself.
The cars starting at 5 and 3 become a fleet, meeting each other at 6.
Note that no other cars meet these fleets before the destination, so the answer is 3.

Note:

0 <= N <= 10 ^ 4
0 < target <= 10 ^ 6
0 < speed[i] <= 10 ^ 6
0 <= position[i] < target
All initial positions are different.
有N辆车，事先知道了他们的位置和速度，他们要去postion的位置。
如果在路上后面的车追上了前面的车，那么不能超过这个车，
只能保险杠挨着保险杠用前车的速度继续前进，那么这个叫做一个车队。单辆车也是一个车队，
最后需要求的是总共有多少个车队到达终点

#看后面的车是否比前面的车更早到终点就行
class Solution(object):
    def carFleet(self, target, position, speed):
        dists = [target - p for p in position]
        stats = [(d, d * 1.0/ v) for d, v in zip(dists, speed)]
        #sort by dists
        stats.sort(key = lambda x:x[0])
        p = 0
        res = 0
        while p < len(stats):
            time = stats[p][1]
            while p < len(stats) and stats[p][1] <= time:
                p+=1
            res += 1
        return res
