class Solution(object):
    def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        counts = collections.Counter(words)
        #The method items() returns a list of dict's (key, value) tuple pairs
        # heap the compare key is -freq
        heap = [(-freq, word) for word, freq in counts.items()]
        #Transform list x into a heap, in-place, in linear time.
        heapq.heapify(heap)
        #xrange is used as a list(range(k)), only use it in for loop
        return [heapq.heappop(heap)[1] for x in xrange(k)]

class Solution(object):
    def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        counts = collections.Counter(words)
        #The method items() returns a list of dict's (key, value) tuple pairs
        items = counts.items()
        items.sort(key = lambda item:(-item[1],item[0]))
        return [item[0] for item in items[0:k]]
        
//java

class Solution {
    //use map<word, freq>
    //use heap
    //O(nlogk) time & O(n) space
    public List<String> topKFrequent(String[] words, int k) {
        List<String> result = new LinkedList<>();
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            String cur = words[i];
            if(map.containsKey(cur)) {
                map.put(cur, map.get(cur) + 1);
            } else {
                map.put(cur, 1);
            }
        }
        
        //Heap
        PriorityQueue<String> pq = new PriorityQueue<>(new Comparator<String>(){
            public int compare(String s1, String s2) {
               return map.get(s1) == map.get(s2)? s2.compareTo(s1) : map.get(s1) - map.get(s2);
            }
        });
        for(String s:map.keySet()) {
            pq.offer(s);
            if(pq.size() > k) {
                pq.poll();
            }
        }
        while(!pq.isEmpty()) {
            result.add(0,pq.poll());
        }
        return result;
    }
}

//要更快可以把map改成trie
