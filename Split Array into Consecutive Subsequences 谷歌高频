You are given an integer array sorted in ascending order (may contain duplicates), 
you need to split them into several subsequences, 
where each subsequences consist of at least 3 consecutive integers. 
Return whether you can make such a split.

Example 1:
Input: [1,2,3,3,4,5]
Output: True
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3
3, 4, 5
Example 2:
Input: [1,2,3,3,4,4,5,5]
Output: True
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3, 4, 5
3, 4, 5
Example 3:
Input: [1,2,3,4,4,5]
Output: False

其实就是看能不能拆成3组以上的连续从小到大扑克牌

class Solution(object):
    def isPossible(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        freq = collections.Counter(nums)
        end = collections.Counter()
        for i in nums:
            if not freq[i]:
                continue
            freq[i] -=1
            if end[i - 1] > 0: #如果上一个有
                end[i - 1] -= 1
                end[i] += 1
            elif freq[i + 1] and freq[i + 2]:
                freq[i + 1] -= 1
                freq[i + 2] -= 1
                end[i + 2] += 1
            else:
                return False
        return True
