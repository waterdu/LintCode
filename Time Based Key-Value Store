Create a timebased key-value store class TimeMap, that supports two operations.

1. set(string key, string value, int timestamp)

Stores the key and value, along with the given timestamp.
2. get(string key, int timestamp)

Returns a value such that set(key, value, timestamp_prev) was called previously, with timestamp_prev <= timestamp.
If there are multiple such values, it returns the one with the largest timestamp_prev.
If there are no values, it returns the empty string ("").
 

Example 1:

Input: inputs = ["TimeMap","set","get","get","set","get","get"], inputs = [[],["foo","bar",1],["foo",1],["foo",3],["foo","bar2",4],["foo",4],["foo",5]]
Output: [null,null,"bar","bar",null,"bar2","bar2"]
Explanation:   
TimeMap kv;   
kv.set("foo", "bar", 1); // store the key "foo" and value "bar" along with timestamp = 1   
kv.get("foo", 1);  // output "bar"   
kv.get("foo", 3); // output "bar" since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie "bar"   
kv.set("foo", "bar2", 4);   
kv.get("foo", 4); // output "bar2"   
kv.get("foo", 5); //output "bar2"   

Example 2:

Input: inputs = ["TimeMap","set","set","get","get","get","get","get"], inputs = [[],["love","high",10],["love","low",20],["love",5],["love",10],["love",15],["love",20],["love",25]]
Output: [null,null,null,"","high","high","low","low"]
而使用key : [time1, time2...]，key : [value1, value2...]这种存储方式能保证time和value是一一对应的。
所以这种方式先根据key和time快速查找到小于该时间的timex，然后就能根据索引快速找到此索引对应的valuex.
我使用了一个这个max_字典，用来保存当前的key更新的时间。这样的好处是，当我们查找一个不小于当前时间的值的时候，一定是最后一次插入的那个时间。

class TimeMap(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.t = collections.defaultdict(list)
        self.v = collections.defaultdict(list)
        self.max = collections.defaultdict(list)

    def set(self, key, value, timestamp):
        """
        :type key: str
        :type value: str
        :type timestamp: int
        :rtype: None
        """
        self.t[key].append(timestamp)
        self.v[key].append(value)
        self.max[key] = max(self.max[key],timestamp)

    def get(self, key, timestamp):
        """
        :type key: str
        :type timestamp: int
        :rtype: str
        """
        if key not in self.t:
            return ""
        if timestamp >= self.max[key]:
            return self.v[key][-1]
        v = bisect.bisect_right(self.t[key], timestamp)
        if v:
            return self.v[key][v - 1]
        return ""

# Your TimeMap object will be instantiated and called as such:
# obj = TimeMap()
# obj.set(key,value,timestamp)
# param_2 = obj.get(key,timestamp)
