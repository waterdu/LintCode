Given an integer array nums, find the contiguous subarray within an 
array (containing at least one number) which has the largest product.

Example 1:

Input: [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

class Solution(object):
    def maxProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # use presum and surfix sum
        if not nums:
            return 0
        n = len(nums)
        maxpre = nums[0]
        minpre = nums[0]
        maxsofar =  nums[0]
        curmax = nums[0]
        curmin = nums[0]
        for i in range(1,n):
            curmax = max(maxpre * nums[i], nums[i], minpre * nums[i])
            curmin = min(maxpre * nums[i], nums[i], minpre * nums[i])
            maxsofar = max(curmax, maxsofar)
            maxpre = curmax
            minpre = curmin
        return maxsofar
