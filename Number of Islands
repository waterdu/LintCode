//尽量用BFS做
public class Solution {
    //Time Complexity - O(mn)， Space Complexity - O(1),cause no extra data structure used, just a few stack for dfs recursive
    private static final int[][] neibors = {{1,0}, {0,1},{-1, 0},{0,-1}};
    public int numIslands(char[][] grid) {
        int count=0;
        int m=grid.length;
        if(m == 0){
            return 0;
        }
        int n=grid[0].length;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1'){
                    bfs(grid,i,j, m, n);
                    count++;
                }
            }
        }
        return count;
    }
    
    private void dfs(char[][] grid, int i,int j, int m,int n){//i.j is the point, m n is the size
        Queue<int[]> q = new LinkedList();
        int[] pair = {i, j};
        q.offer(pair);
        while(!s.isEmpty()){
            int[] current = q.poll();
            grid[current[0]][current[1]] = 0;
            for(int[] neibor:neibors){
                int x = current[0] + neibor[0];
                int y = current[1] + neibor[1];
                if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y]=='1'){
                    int[] neiborPair = {x, y};
                    s.offer(neiborPair);
                }
            }
        }
    }
}



//dfs和stack解法
public class Solution {
    //Time Complexity - O(mn)， Space Complexity - O(1),cause no extra data structure used, just a few stack for dfs recursive
    private static final int[][] neibors = {{1,0}, {0,1},{-1, 0},{0,-1}};
    public int numIslands(char[][] grid) {
        int count=0;
        int m=grid.length;
        if(m == 0){
            return 0;
        }
        int n=grid[0].length;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1'){
                    dfs(grid,i,j, m, n);
                    count++;
                }
            }
        }
        return count;
    }
    
    private void dfs(char[][] grid, int i,int j, int m,int n){//i.j is the point, m n is the size
        Stack<int[]> s = new Stack<int[]>();
        int[] pair = {i, j};
        s.push(pair);
        while(!s.isEmpty()){
            int[] current = s.pop();
            grid[current[0]][current[1]] = 0;
            for(int[] neibor:neibors){
                int x = current[0] + neibor[0];
                int y = current[1] + neibor[1];
                if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y]=='1'){
                    int[] neiborPair = {x, y};
                    s.push(neiborPair);
                }
            }
        }
    }
}
