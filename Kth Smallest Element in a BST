Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently?
How would you optimize the kthSmallest routine?

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        #一定要理解bst的从小到大顺序是inorder traveral
        self.k = k
        self.res = 0
        def dfs(root):
            if not root:
                return 0
            dfs(root.left)
            self.k -=1
            if self.k == 0:
                self.res = root.val
            dfs(root.right)
        dfs(root)
        return self.res

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        #一定要理解bst的从小到大顺序是inorder traveral
        # node 是tree, value就是值
        stack=[(root, "node")]
        while stack:
            cur, typE = stack.pop()
            if typE == "node":
                #反向顺序存入stack
                if cur.right:
                    stack.append((cur.right, "node"))
                stack.append((cur.val, "value"))
                if cur.left:
                    stack.append((cur.left, "node"))
                
                
            elif typE == "value":
                k-=1
                if k == 0:
                    return cur
        return 0
