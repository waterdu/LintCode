class Solution {
    public List<String> removeInvalidParentheses(String s) {
        //it says minimun, like graph, so we want to use bfs
        List<String> res = new ArrayList<>();
        if (s == null) {
            return res;
        }
        Queue<String> q = new LinkedList<>();
        Set<String> visited = new HashSet();
        boolean foundResult = false;
        q.add(s);
        while(!q.isEmpty()) {
            String current = q.poll();

            if(isValid(current)) {
                res.add(current);
                foundResult = true;
                
            }
            
            if(foundResult) {
                continue;
            }
            //remove first ()
            for (int i = 0; i <current.length(); i++){
                if(current.charAt(i) == '(' || current.charAt(i) == ')') {
                    String newString = current.substring(0, i) + current.substring(i + 1);
                    if(!visited.contains(newString)){
                        q.add(newString);
                        visited.add(newString);
                    }
                }
            }
        }
        return res;
    }
    
    private boolean isValid(String s) {
        if (s == null) {
            return false;
        }
        int size = s.length();
        int count = 0;
        for (char c:s.toCharArray()) {
            if (c == '('){
                count++;
            } else if (c == ')') {
                count--;
            }
            if (count < 0){
                return false;
            }
        }
        return count == 0;
    }
}

