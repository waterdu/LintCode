# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def convertBST(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        self.sum = 0
        self.convert(root)
        return root
    def convert(self,root):
        if not root:
            return
        self.convert(root.right)
        root.val += self.sum
        self.sum = root.val
        self.convert(root.left)
  //遍历解法
  
      def convertBST(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        if not root:
            return root
        stack = []
        p = root
        pre_sum = 0
        while stack or p:
            while p:
                stack.append(p)
                p = p.right
            node = stack.pop()
            val = node.val
            node.val += pre_sum
            pre_sum += val
            p = node.left
        return root
