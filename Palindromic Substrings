Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:

Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
 

Example 2:

Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".

class Solution(object):
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        n = len(s)
        self.res = 0
        # a|b|c
        def extendPalindrome(left, right):
            while left >=0 and right <n and s[left] == s[right]:
                self.res+=1
                left -= 1
                right += 1
        for center in range(n):
            extendPalindrome(center,center)
            extendPalindrome(center, center + 1)
        return self.res

class Solution(object):
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        n = len(s)
        res = 0
        # a|b|c
        for center in range(2*n - 1):
            left = center/2
            right = left + center%2
            while left >= 0 and right < n and s[left] == s[right]:
                res+=1
                left-=1
                right+=1
        return res

class Solution {
    //expand way
    public int countSubstrings(String s) {
        int[] count = new int[1];
        if(s == null || s.length() == 0) {
            return 0;
        }
        //O(n)
        for (int i = 0; i < s.length(); i++) {//i is the mid of the palindrome
            extendPalindrome(s, i, i, count);
             extendPalindrome(s, i, i + 1, count);
        }
        return count[0];
    }
    
    //O(n)
    private void extendPalindrome(String s, int left, int right, int[] count) {
        while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
            count[0]++;
        }
    }
}
