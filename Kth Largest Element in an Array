Find the kth largest element in an unsorted array. 
Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:

Input: [3,2,1,5,6,4] and k = 2
Output: 5
Example 2:

Input: [3,2,3,1,2,4,5,5,6] and k = 4
Output: 4
Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.

return heapq.nlargest(k, nums)[-1]








//heap sort解法
public class Solution {
    //nlgk, space k
    //the rest is smaller, so keep minHeap
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int i:nums){
            pq.offer(i);
            if(pq.size()>k){
                pq.poll();
            }
        }
        return pq.poll();//largest
    }
}

class Solution {
    public int findKthLargest(int[] nums, int k) {
        int start = 0, end = nums.length - 1, index = nums.length - k;//sort fome small to right
        while(start < end) {
            int pivot = partition(nums, start, end);
            if(pivot < index) {
                start = pivot + 1;
            } else if(pivot > index) {
                end = pivot - 1;
            } else {
                return nums[pivot];
            }
        }
        //sample [1];
        return nums[start];
    }
    private int partition(int[] nums, int start, int end) {
        int pivot = start;
        while(start <= end) {
            //skip duplicate
            while(start <= end && nums[start] <= nums[pivot]){
                start++;
            }
            while(start <= end && nums[end] > nums[pivot]){
                end--;
            }
            if(start > end){
                break;
            }
            swap(nums, start, end);
        }
        swap(nums, end, pivot);//because when break start> end: end pivot start, we need swap end and pivot and return end
        return end;
    }
    private void swap(int[] nums, int left, int right){
        int tmp = nums[left];
        nums[left] = nums[right];
        nums[right] = tmp;
    }
}


//标准quick sort解法
public class Solution {
    public int findKthLargest(int[] nums, int k) {
        int n = nums.length;
        return findKthLargest(nums, 0, n - 1, n - k);// n - k th smallest number
    }    
    public int findKthLargest(int[] nums, int start, int end, int k) {
    	if(start == end){
    	    return nums[start];
    	}//5 1 2 6 3
        // 1 2 3 6 5
      
    	int pivot = nums[end]; // Take nums[end] as the pivot, 
        System.out.println(pivot);
    	int left = start;//left is first index that is >= pivot
    	for(int i = left; i < end; i++) {// i 不能= end, 否者StackOverflowError
    		if(nums[i] <= pivot){
    		    swap(nums, left, i);
                left++;
    		}
        }
    	swap(nums, left, end);// Finally, swap nums[end] with nums[left]
    	if(left == k){
    	    return nums[left];
    	}else if(left < k){
    	    return findKthLargest(nums, left + 1, end, k);
    	}else{
    	    return findKthLargest(nums, start, left - 1, k);
    	}
    } 
    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
