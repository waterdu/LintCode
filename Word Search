class Solution {
    public boolean exist(char[][] board, String word) {
        if (word == null || word.length() == 0) {
            return true;
        }
        if (board == null || board.length == 0 || board[0].length == 0) {
            return false;
        }
        for(int i = 0;i < board.length; i++){
            for(int j = 0;j < board[0].length; j++){
                if(dfs(board, word, 0, i, j)) {
                    return true;
                }
            }
        }
        return false;
    }
    private static final int[][] dirs = {{1,0}, {-1, 0}, {0, 1}, {0, -1}};
    private boolean dfs(char[][] board, String word, int indexInWord, int i, int j) {
        if(indexInWord == word.length()) {
            return true;
        }
        if( i < 0 || i == board.length || j < 0 || j == board[0].length) {
            return false;//edge case
        }
        char old = word.charAt(indexInWord);
        if(old != board[i][j]) {
            return false;
        }
        
        board[i][j] = '#';//means visited
        for(int[] dir:dirs) {
            if(dfs(board, word, indexInWord + 1, i + dir[0], j + dir[1])) {
                board[i][j] = old;
                return true;
            }
        }
        board[i][j] = old;
        return false;//can't find
    }
}
