On a table are N cards, with a positive integer printed on the front and back of each card (possibly different).
We flip any number of cards, and after we choose one card. 
If the number X on the back of the chosen card is not on the front of any card, then this number X is good.
What is the smallest number that is good?  If no number is good, output 0.
Here, fronts[i] and backs[i] represent the number on the front and back of card i. 
A flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.
这个题的英文描述不清

Example:

Input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]
Output: 2
Explanation: If we flip the second card, the fronts are [1,3,4,4,7] and the backs are [1,2,4,1,3].
We choose the second card, which has number 2 on the back, and it isn't on the front of any card, so 2 is good.
有一些正反面都有数字的牌，我们可以做很多次翻转操作，每次翻转时如果这个牌背面的数字没有在这群牌的正面出现过，
那么就可以把这个牌翻转过来。求翻转哪个牌可以之后，可以使得所有牌正面中的最小值最小。

class Solution(object):
    def flipgame(self, fronts, backs):
        """
        :type fronts: List[int]
        :type backs: List[int]
        :rtype: int
        """
        same = set()
        for x,y in zip(fronts, backs):
            if x == y:
                same.add(x)
        
        res = float('inf')
        for f in fronts:
            if f not in same:
                res = min(res,f)
        
        for b in backs:
            if b not in same:
                res = min(res,b)
        if res == float('inf'):
            return 0
        return res
    
