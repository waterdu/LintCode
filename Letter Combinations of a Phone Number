class Solution {
    public List<String> letterCombinations(String digits) {
        ArrayList<String> result = new ArrayList<>();
        if (digits == null || digits.length() == 0) {
            return result;
        }
        Map<Character, char[]> map = new HashMap<>();
        
        //initialize map
        map.put('0',new char[] {});
        map.put('1',new char[] {});
        map.put('2', new char[] { 'a', 'b', 'c' });
        map.put('3', new char[] { 'd', 'e', 'f' });
        map.put('4', new char[] { 'g', 'h', 'i' });
        map.put('5', new char[] { 'j', 'k', 'l' });
        map.put('6', new char[] { 'm', 'n', 'o' });
        map.put('7', new char[] { 'p', 'q', 'r', 's' });
        map.put('8', new char[] { 't', 'u', 'v'});
        map.put('9', new char[] { 'w', 'x', 'y', 'z' });
        StringBuilder sb = new StringBuilder();
        dfs(map, digits, sb, result);
        return result;
    }
    private void dfs(Map<Character, char[]> map, String digits, StringBuilder sb,  ArrayList<String> result) {
        int index = sb.length();
        if (index == digits.length()){
            result.add(sb.toString());
            return;
        }
        for (char c:map.get(digits.charAt(index))) {
            sb.append(c);
            dfs(map, digits, sb, result);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
