Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        dic = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', 
                   '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
        if not digits:
            return []
        if len(digits) == 1:
            return list(dic[digits[0]])
        res = ['']
        for i in range(len(digits)):
            letters = dic[digits[i]]
            res = [w + c for w in res for c in letters]

        return res


class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        dic = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', 
                   '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
        if not digits:
            return []
        if len(digits) == 1:
            return list(dic[digits[0]])
        prev = self.letterCombinations(digits[:-1])
        addtional = dic[digits[-1]]
        if addtional != None:
            return [s+c for s in prev for c in addtional]
            
            
class Solution {
    public List<String> letterCombinations(String digits) {
        ArrayList<String> result = new ArrayList<>();
        if (digits == null || digits.length() == 0) {
            return result;
        }
        Map<Character, char[]> map = new HashMap<>();
        
        //initialize map
        map.put('0',new char[] {});
        map.put('1',new char[] {});
        map.put('2', new char[] { 'a', 'b', 'c' });
        map.put('3', new char[] { 'd', 'e', 'f' });
        map.put('4', new char[] { 'g', 'h', 'i' });
        map.put('5', new char[] { 'j', 'k', 'l' });
        map.put('6', new char[] { 'm', 'n', 'o' });
        map.put('7', new char[] { 'p', 'q', 'r', 's' });
        map.put('8', new char[] { 't', 'u', 'v'});
        map.put('9', new char[] { 'w', 'x', 'y', 'z' });
        StringBuilder sb = new StringBuilder();
        dfs(map, digits, sb, result);
        return result;
    }
    private void dfs(Map<Character, char[]> map, String digits, StringBuilder sb,  ArrayList<String> result) {
        int index = sb.length();
        if (index == digits.length()){
            result.add(sb.toString());
            return;
        }
        for (char c:map.get(digits.charAt(index))) {
            sb.append(c);
            dfs(map, digits, sb, result);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
