Given an array consists of non-negative integers, your task is to count the number 
of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.
Example 1:
Input: [2,2,3,4]
Output: 3
Explanation:
Valid combinations are: 
2,3,4 (using the first 2)
2,3,4 (using the second 2)
2,2,3
Note:
The length of the given array won't exceed 1000.
The integers in the given array are in the range of [0, 1000].

class Solution(object):
    def triangleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        count = 0
        third = len(nums) -1
        one = 0
        for third in range(len(nums) -1,1,-1):
            one = 0
            second = third - 1
            while one < second:
                if nums[one] + nums[second] > nums[third]:
                    count+= second - one #为什么不是+1？因为有second - one个one向右边移动满足条件
                    second-=1
                else:
                    one+=1
        return count
