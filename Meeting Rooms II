Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), 
find the minimum number of conference rooms required.

For example, Given [[0, 30],[5, 10],[15, 20]], return 2.
意思就是找最少conflict

Definition of Interval.
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""
//扫描线解法
class Solution:
    """
    @param intervals: an array of meeting time intervals
    @return: the minimum number of conference rooms required
    """
    def minMeetingRooms(self, intervals):
        # Write your code here
        points = []
        for i in intervals:
            #1 means add meeting, -1 remove meeting
            points.append((i.start, 1))
            points.append((i.end, -1))
        ongoingMeetings = 0
        room = 0
        for time, meeting in sorted(points):
            ongoingMeetings+= meeting
            room = max(room, ongoingMeetings)
        return room
//减少不必要空间的更快解法
    public int minMeetingRooms(Interval[] intervals) {
        if(intervals == null || intervals.length == 0) {
            return 0;
        }
        int[] starts = new int[intervals.length];
        int[] ends = new int[intervals.length];
        for(int i=0; i<intervals.length; i++) {
            starts[i] = intervals[i].start;
            ends[i] = intervals[i].end;
        }
        Arrays.sort(starts);
        Arrays.sort(ends);
        int rooms = 0;
        int endsItr = 0;
        for(int i=0; i<starts.length; i++) {
            if(starts[i]<ends[endsItr])
                rooms++;
            else //means start[i] > ends, can have this meeting
                endsItr++;
        }
        return rooms;
    }
