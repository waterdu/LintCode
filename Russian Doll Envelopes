class Solution {
    private static final Comparator<int[]> comp = new Comparator<int[]>(){
            public int compare(int[] e1, int[] e2) {
                if(e1[0] != e2[0]) {
                    //don't use -, will overflow
                    return Integer.compare(e1[0], e2[0]);
                }
                //if width is the same, order by height
                return Integer.compare(e2[1], e1[1]);
            }
    };
    public int maxEnvelopes(int[][] envelopes) {
        if(envelopes == null || envelopes.length == 0|| envelopes[0].length == 0|| envelopes[0].length == 0) {
            return 0;
        }
        
        Arrays.sort(envelopes, comp);
        //use LIS on height
        int dp[] = new int[envelopes.length];
        int len = 0;
        for (int[] envelope:envelopes) {
            //do binary search from index 0 to len(exclusive)
            int index = Arrays.binarySearch(dp, 0, len, envelope[1]);
            if(index < 0) {
                index = - (index + 1);
            }
            dp[index] = envelope[1];
            if(index == len) {
                len++;
            }
        }
        return len;
    }
}
