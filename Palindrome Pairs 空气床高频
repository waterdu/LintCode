Given a list of unique words, find all pairs of distinct indices (i, j) in the given list, 
so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.

Example 1:

Input: ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]] 
Explanation: The palindromes are ["dcbaabcd","abcddcba","slls","llssssll"]
Example 2:

Input: ["bat","tab","cat"]
Output: [[0,1],[1,0]] 
Explanation: The palindromes are ["battab","tabbat"]
1). 若当前单词word本身为回文，且words中存在空串，则将空串下标bidx与idx加入答案

2). 若当前单词的逆序串在words中，则将逆序串下标ridx与idx加入答案

3). 将当前单词word拆分为左右两半left，right。

     3.1) 若left为回文，并且right的逆序串在words中，则将right的逆序串下标rridx与idx加入答案
     
     3.2) 若right为回文，并且left的逆序串在words中，则将left的逆序串下标idx与rlidx加入答案


class Solution(object):
    def palindromePairs(self, words):
        """
        :type words: List[str]
        :rtype: List[List[int]]
        """
        def isPalindrome(s):
            if s == s[::-1]:
                return True
            return False
        lookup = {w:index for index,w in enumerate(words)}
        res = []
        for i,w in enumerate(words):
            for j in range(len(w)+1):
                left = w[:j]
                right = w[j:] #right can be empty
                
                leftReverse = left[::-1]
                rightReverse = right[::-1]
                # left + right + leftReverse = palin
                if isPalindrome(right) and leftReverse in lookup:
                    if lookup[leftReverse] != i:
                        res.append([i, lookup[leftReverse]])
                    
                # rightReverse + left + right = palin
                if isPalindrome(left) and len(left)!=0 and rightReverse in lookup:
                #为啥要检查孔？因为left是空的话，就和上面重复了，上面的已经检查过了
                    if lookup[rightReverse] != i:
                        res.append([lookup[rightReverse],i])
        return res
        


class Solution {
      // From naive O(nnk) to O(nkk) time.
    public List<List<Integer>> palindromePairs(String[] words) {
        Map<String, Integer> map = new HashMap<>();
         int n = words.length;
        for (int i = 0; i < n; i++) {
            map.put(words[i], i);
        }
        List<List<Integer>> result = new ArrayList<>();
         for (int i = 0; i < n; i++) {//n
            for (int j = 0; j <= words[i].length(); j++) {//k
                String s1 = words[i].substring(0, j);
                String s2 = words[i].substring(j);
                if (isPalindrome(s1)) { // word1 + s1 + s2 is palindrom, s1 in the middle
                    String reverseS2 = new StringBuilder(s2).reverse().toString();
                    if(map.containsKey(reverseS2) && map.get(reverseS2) != i) {
                        List<Integer> list = new ArrayList<>();
                        list.add(map.get(reverseS2));
                        list.add(i);
                        result.add(list);
                    }
                }
                if (isPalindrome(s2)) {// s1 + s2 + word2 is palindrom, s2 in the middle 
                    String reverseS1 = new StringBuilder(s1).reverse().toString();
                    // check s2 != 0 to avoid duplicates
                    if(map.containsKey(reverseS1) && map.get(reverseS1) != i && s2.length() != 0) {
                        List<Integer> list = new ArrayList<>();
                        list.add(i);
                        list.add(map.get(reverseS1));
                        result.add(list);
                    }
                }
            }
         }
        return result;
        
    }
        // Utility function to check if a string is a palindrome
    private static boolean isPalindrome(String str)
    {
        int len = str.length();
      
        // compare each character from starting
        // with its corresponding character from last
        for (int i = 0; i < len/2; i++) {
            if(str.charAt(i) != str.charAt(len - 1 - i)) {
                return false;
            }
        }
        return true;
    }
}

class Solution {
// brute force
//  1- Consider each pair one by one.
// 2- Check if any of the pairs forms a palindrome
//    after concatenating them.
// 3- Return true, if any such pair exists.
// 4- Else, return false.
// n^2k, k is the length of the words to check palindrome
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> result = new ArrayList<>();
        int n = words.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if(i == j) {
                    continue;
                }
                String check = words[i] + words[j];
                if(isPalindrome(check)) {
                    result.add(new ArrayList<>(Arrays.asList(i, j)));
                }
            }
        }
        return result;
    }
    
    // Utility function to check if a string is a palindrome
    private static boolean isPalindrome(String str)
    {
        int len = str.length();
      
        // compare each character from starting
        // with its corresponding character from last
        for (int i = 0; i < len/2; i++) {
            if(str.charAt(i) != str.charAt(len - 1 - i)) {
                return false;
            }
        }
        return true;
    }
}
