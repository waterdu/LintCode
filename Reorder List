/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
//     1) Find the middle point using tortoise and hare method.
// 2) Split the linked list in two halves using found middle point in step 1.
// 3) Reverse the second half.
// 4) Do alternate merge of first and second halves. 
    
    public void reorderList(ListNode head) {
        if(head == null || head.next == null) {
            return;
        }
        //find the middle point using slow fast pointer
        ListNode slow = head, fast = head.next;
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        //cut half
        ListNode left = head;
        ListNode right = slow.next;
        slow.next = null;
        //reverse the second half
        ListNode newRight = reverseList(right);
        
        ListNode dummy = new ListNode(0);
        //merge nodes
        ListNode cur = dummy;
        while(left != null || newRight != null) {
            //first add left list
            if(left != null) {
                cur.next = left;
                cur = cur.next;
                left = left.next;
            }
            //then right list
            if(newRight != null) {
                cur.next = newRight;
                cur = cur.next;
                newRight = newRight.next;
            }
        }
        head = dummy.next;
    }
    
    private ListNode reverseList(ListNode head) {
        if(head == null || head.next == null) {
            return head;
        }
        ListNode pre = null;
        ListNode cur = head;
        while(cur != null) {
            ListNode temp = cur.next;
            cur.next = pre;
            pre = cur;
            cur = temp;
        }
        return pre;
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
     public void reorderList(ListNode head) {  
        // write your code here
        if (head == null || head.next == null){
            return;
        }
        ListNode mid = findMiddle(head);
        ListNode newNode = reverse(mid.next);
        mid.next = null;
        merge(head,newNode);
    }
    public ListNode findMiddle(ListNode head){
        ListNode slow = head;
        ListNode fast = head.next;
        while (fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    private ListNode reverse(ListNode head) {
        if (head == null || head.next == null){
            return head;
        }
        ListNode pre = null;
        while (head != null) {
            ListNode temp = head.next;
            head.next = pre;
            pre = head;
            head = temp;
        }
        return pre;
    }
    private void merge(ListNode l1, ListNode l2) {
        int index = 0;
        ListNode dummy = new ListNode(0);
        while(l1 != null && l2 != null){
            if (index % 2 == 0){
                dummy.next = l1;
                l1 = l1.next;
            } else {
                dummy.next = l2;
                l2 = l2.next;
            }
            dummy = dummy.next;
            index++;
        }   
        if (l2 != null) {
            dummy.next = l2;
        } else {
            dummy.next = l1;
        }
    }    
}
