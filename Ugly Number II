public class Solution {
    /*
     * @param n: An integer
     * @return: the nth prime number as description.
     */
    public int nthUglyNumber(int n) {
        // write your code here
        Queue<Long> Q = new PriorityQueue<Long>();
        HashSet<Long> inQ = new HashSet<>();
        Long[] primes = new Long[3];
        primes[0] = Long.valueOf(2);
        primes[1] = Long.valueOf(3);
        primes[2] = Long.valueOf(5);
        for(int i = 0; i < 3; i++) {
            Q.add(primes[i]);
            inQ.add(primes[i]);
        }
        Long number = Long.valueOf(1);
        for(int i = 1; i < n; i++) {
            number = Q.poll();
            for(int j = 0; j < 3; j++) {
                if(!inQ.contains(primes[j] * number)) {
                    Q.add(number * primes[j]);
                    inQ.add(number * primes[j]);
                }
            }
        }
        return number.intValue();
    }
}

class Solution {
    public int nthUglyNumber(int n) {
        if(n<=0){
            return -1;
        }
        int[] dp = new int[n + 1];
        dp[1] = 1;
        int i2 = 1;
        int i3 = 1;
        int i5 = 1;
        for(int i = 2; i <= n; i++){
            int ftr2 = dp[i2] * 2;
        	int ftr3 = dp[i3] * 3;
        	int ftr5 = dp[i5] * 5;
            dp[i] = Math.min(Math.min(ftr2, ftr3), ftr5);
            if(dp[i] == ftr2) {
                i2++;
            }
            if(dp[i] == ftr3) {
                i3++;
            }
            if(dp[i] == ftr5) {
                i5++;
            }
        }
        return dp[n];
    }
}
