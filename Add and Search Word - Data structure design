Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. 
A .means it can represent any one letter.

Example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.

//.可以用dfs来做

class WordDictionary(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = {}
        self.end = None
        

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: void
        """
        if not word:
            return
        node = self.root
        for c in word:
            if c not in node:
                node[c] = {}
            node = node[c]
        node[self.end] = None
        

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        if not word:
            return False

        cur = [self.root]
        for c in word:
            if not cur:
                return False
            new_nodes = []
            for node in cur:
                if not node:
                    continue
                elif c == '.':
                    new_nodes.extend(node.values())
                else:
                    if c in node:
                        new_nodes.append(node[c])
            cur = new_nodes
        
        for node in cur:
            if node and self.end in node:
                return True
        
        return False

//解法2
class WordDictionary(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = {}

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: void
        """
        if not word:
            return
        node = self.root
        for c in word:
            if c not in node:
                node[c] = {}
            node = node[c]
        node['$'] = None
        

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        if not word:
            return False
        cur = [self.root]
        for c in word:
            if not cur:
                return False
            newNodes = []
            for node in cur:
                if not node:
                    continue
                elif c == '.':
                    newNodes.extend(node.values())
                elif c in node:
                    newNodes.append(node[c])
            cur = newNodes
        for node in cur:
            if node and '$' in node:
                return True
        return False
