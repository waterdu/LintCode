/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
class ResultType {
    public boolean isBalanced;
    public int maxDepth;
    public ResultType(boolean isBalanced, int maxDepth) {
        this.isBalanced = isBalanced;
        this.maxDepth = maxDepth;
    }
}
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */
    public boolean isBalanced(TreeNode root) {
        // write your code here
        return depth(root) != -1;
    }
     /**
     * @param root: The root of binary tree.
     * @return: If the tree is not banlaced, return -1, 
     * otherwise return the depth of the tree, 
     */
    private int depth(TreeNode root) {
        if (root == null){
             return 0;
        }
        int left = depth(root.left);
        int right = depth(root.right);
        if (left == -1 ||right == -1 ||Math.abs(left - right) > 1) {
            return -1;
        }
        return Math.max(left, right) + 1;
    }
}
