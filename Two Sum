Given an array of integers, return indices of the two numbers such that they add up to a 
specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
//暴力解
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        n = len(nums)
        for i in range(n):
            for j in range(i + 1, n, 1):
                if nums[i] + nums[j] == target:
                    return [i, j]
        return []
        
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        # value, index
        map = {}
        
        for i, x in enumerate(nums):
            y = target - x
            if y in map:
                return (map[y] ,i)
            else:
                map[x] = i
            


//two solution, map
//

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            map.put(nums[i], i);
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}

//python
//brute forth, n^2
 l = len(nums)
        for i in range(l-1):
            for j in range(i+1,l):
                if nums[i] + nums[j] == target:
//map
class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        map = {}
        for i, num in enumerate(numbers):
            res = target - num
            if res in map:
                return [map[res], i]
            
            map[numbers[i]] = i
            
        return [-1, -1]
 
//sort, two pointer
    def twoSum(self, numbers, target):
        # write your code here
        lenth = len(numbers)
        array = list(zip(numbers, range(lenth)))
        array.sort()
        left = 0
        right = lenth - 1
        while left < right:
            ans = array[left][0] + array[right][0]
            if ans < target:
                left = left + 1
            elif ans > target:
                right = right - 1
            else:
                if array[left][1] >  array[right][1]:
                    return  [array[right][1],  array[left][1]]
                return [array[left][1], array[right][1]]
            
        return [-1, -1]

        
