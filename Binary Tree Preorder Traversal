/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 * 
 * preoder mean mid left right
 * the time complexity is O(n), because you traverse each node once.
 * The space complexity of this traversal seems to be O(h). 
 * h is height of tree.
 * The best way to think about space complexity of recursive functions
 * is (# of stack frames)*(space per stack frame).
 */

 class Solution(object):
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        if not root:
            return res
        self.dfs(root, res)

        return res
    
    def dfs(self, root, res):
        if not root:
            return
        res.append(root.val)
        self.dfs(root.left, res)
        self.dfs(root.right, res)
 //递归法换成stack法很容易，记得加入stack的顺序反着来就行
 class Solution(object):
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []

        if not root:
            return res
        stack = [root]
        self.dfs(stack, res)

        return res
    
    def dfs(self, stack, res):
        while stack:
            cur = stack.pop()
            res.append(cur.val)
            if cur.right:
                stack.append(cur.right)
            if cur.left:
                stack.append(cur.left)
        return 
//Travelsal method
public class Solution {
    /*
     * @param root: A Tree
     * @return: Preorder in ArrayList which contains node values.
     */
    public List<Integer> preorderTraversal(TreeNode root) {
        // write your code here
        List<Integer> result = new ArrayList<Integer>();
        traverse(root, result);
        return result;
    }
    private void traverse(TreeNode root, List<Integer> result){
        if (root == null) {
            return; 
        }
        
        result.add(root.val);
        traverse(root.left, result);
        traverse(root.right, result);
    }
}

 * 要把recursion想成不递归，就必须得用stack来存recursion的stack
     */
    public List<Integer> preorderTraversal(TreeNode root) {
        // write your code here
        List<Integer> result = new ArrayList<Integer>();
        if (root == null) {
            return result;
        }
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        while(!stack.isEmpty()) {
            TreeNode current = stack.pop();
            result.add(current.val);
            //stack is last in first out, we want first out left
        //so we first add right, last add left
            if(current.right != null){
                stack.push(current.right);
            }
             if(current.left != null){
                stack.push(current.left);
            }
        }
   
        return result;
    }
