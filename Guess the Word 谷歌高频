This problem is an interactive problem new to the LeetCode platform.
We are given a word list of unique words, each word is 6 letters long, and one word in this list is chosen as secret.
You may call master.guess(word) to guess a word.  The guessed word should have type string and must be from the original list with
6 lowercase letters.

This function returns an integer type, representing the number of exact matches (value and position) of 
your guess to the secret word.  Also, if your guess is not in the given wordlist, it will return -1 instead.

For each test case, you have 10 guesses to guess the word. At the end of any number of calls,
if you have made 10 or less calls to master.guess and at least one of these guesses was the secret, you pass the testcase.

Besides the example test case below, there will be 5 additional test cases, each with 100 words in the word list. 
The letters of each word in those testcases were chosen independently at random from 'a' to 'z',
such that every word in the given word lists is unique.

Example 1:
Input: secret = "acckzz", wordlist = ["acckzz","ccbazz","eiowzz","abcczz"]

Explanation:

master.guess("aaaaaa") returns -1, because "aaaaaa" is not in wordlist.
master.guess("acckzz") returns 6, because "acckzz" is secret and has all 6 matches.
master.guess("ccbazz") returns 3, because "ccbazz" has 3 matches.
master.guess("eiowzz") returns 2, because "eiowzz" has 2 matches.
master.guess("abcczz") returns 4, because "abcczz" has 4 matches.

We made 5 calls to master.guess and one of them was the secret, so we pass the test case.
Note:  Any solutions that attempt to circumvent the judge will result in disqualification.

给你一个字典，其中一个String是从字典中取出来的，问给你10次机会，找到这个String，每次询问会返回给你你选择的String和待找到的String相同位置的个数。
For example we guess "aaaaaa" and get matches x = 3, we keep the words with exactly 3 a.
Also we need to know the matches between two words, so a sub function as following will be helpful.

So we compare each two words and for each word, we note how many 0 matches it gets.
Then we guess the word with minimum 0 matches.
So even in most cases we get 0 match from master, it's still the best word that we can guess.

Because the wordlist will reduce at minimum as possible.
# """
# This is Master's API interface.
# You should not implement it, or speculate about its implementation
# """
#class Master(object):
#    def guess(self, word):
#        """
#        :type word: str
#        :rtype int
#        """
#解法是每次猜词筛选掉match数不一样的结果
# guessword = random.choice(wordlist)这个语法要会


class Solution(object):
    def findSecretWord(self, wordlist, master):
        def matches(guessword,w):
            count = 0
            for i,j in zip(guessword, w):
                if i == j:
                    count += 1
            return count
        n = 0
        while n < 6:
            guessword = random.choice(wordlist)
            n = master.guess(guessword)
            listtmp = []
            for w in wordlist:
                if matches(guessword, w) == n:
                    listtmp.append(w)
            wordlist = listtmp
