class Solution {
    //sliding window way
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        Map<Character, Integer> map = new HashMap<>();
        int num = 0, left = 0, res = 0;
        for (int right = 0; right < s.length(); right++) {
            char c = s.charAt(right);
            if(map.get(c) == null) {
                map.put(c, 1);
            } else {
                map.put(c, map.get(c) + 1);
            }
            if(map.size() > k) {
                char leftC = s.charAt(left);
                map.put(leftC, map.get(leftC) - 1);
                if(map.get(leftC) == 0) {
                    map.remove(leftC);
                }
                left++;
            }
            res = Math.max(res, right - left +1);
        }
        return res;
    }
}

class Solution {
    //sliding window way
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        Map<Character, Integer> map = new HashMap<>();
        int num = 0; // how many distinct
        int left = 0, res = 0;
        char c;
        int count;
        for (int right = 0; right < s.length(); right++) {
            c = s.charAt(right);
            count = map.getOrDefault(c, 0) + 1;
            map.put(c, count);
            if(count == 1) {
                num++;
            }
            if(num > k) {
                do {
                    c = s.charAt(left);
                    left++;
                    count = map.get(c) - 1;
                    map.put(c, count);
                } while (count > 0);
                num--;
            }
            res = Math.max(res, right - left +1);
        }
        return res;
    }
}
