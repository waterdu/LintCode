A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. 
Now suppose you are given the locations and height of all the buildings as shown on a cityscape photo (Figure A), 
write a program to output the skyline formed by these buildings collectively (Figure B).

Buildings  Skyline Contour
The geometric information of each building is represented by a triplet of integers [Li, Ri, Hi], 
where Li and Ri are the x coordinates of the left and right edge of the ith building, respectively, 
and Hi is its height. It is guaranteed that 0 ≤ Li, Ri ≤ INT_MAX, 0 < Hi ≤ INT_MAX, and Ri - Li > 0. 
You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.

For instance, the dimensions of all buildings in Figure A are recorded as: [ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] .
The output is a list of "key points" (red dots in Figure B) in the format of [ [x1,y1], [x2, y2], [x3, y3], ... ] 
that uniquely defines a skyline. A key point is the left endpoint of a horizontal line segment. 
Note that the last key point, where the rightmost building ends, 
is merely used to mark the termination of the skyline, and always has zero height. 
Also, the ground in between any two adjacent buildings should be considered part of the skyline contour.

For instance, the skyline in Figure B should be represented as:[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ].

Notes:

The number of buildings in any input list is guaranteed to be in the range [0, 10000].
The input list is already sorted in ascending order by the left x position Li.
The output list must be sorted by the x position.
There must be no consecutive horizontal lines of equal height in the output skyline. 
For instance, [...[2 3], [4 5], [7 5], [11 5], [12 7]...] is not acceptable; 
the three lines of height 5 should be merged into one in the final output as such:
[...[2 3], [4 5], [12 7], ...]

class Solution:
    def getSkyline(self, buildings):
        lines = []
        for l, r, h in buildings:
            lines.append((l, -h, r))
            lines.append((r, 0, None))
        lines.sort()
        res = [(0,0)]
        heap = [(0, sys.maxsize)]
        for l, h, r in lines:
            curHigh = heap[0][1]
            while l >= curHigh:
                heapq.heappop(heap)
            if h != 0:
                heapq.heappush(heap,[h,r])
            if res[-1][1] != -heap[0][0]:
                res.append([l,-heap[0][0]])
        return res[1:]

public class Solution {
    public List<int[]> getSkyline(int[][] buildings) {
        List<int[]> height = new ArrayList<>();
        List<int[]> result = new ArrayList<>();
        for(int[] b:buildings){
            height.add(new int[]{b[0],b[2]});//入度
            height.add(new int[]{b[1],-b[2]});//出度
        }
        Collections.sort(height,(a,b) -> a[0]!=b[0]? a[0]-b[0]:b[1]-a[1]);
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(11,(l1,l2) ->
        l2-l1);//构建堆，按照纵坐标来判断大小
        pq.add(0);//将地平线0先加入堆中
        //prev用于记录上次keypoint的高度
        int prev=0;
        for(int[] h:height){
            if(h[1]>0){//将左顶店加入堆中
                pq.add(h[1]);
            } else {//将由定点对应的左顶点移去
                pq.remove(-h[1]);
            }
            int cur = pq.peek();//如果堆的新顶部和上个keypoint的高度不一样，则加入一个新的keyppint
            if(prev != cur){
                result.add(new int[]{h[0],cur});
                prev=cur;
            }
        }
        return result;
        
    }
}
//下面解法的巧妙之处就是把Building封装起来，这样就能用TreeMap来处理duplicate
class Solution {
    public List<int[]> getSkyline(int[][] buildings) {
        Building[] lefts = new Building[buildings.length];
        Building[] rights = new Building[buildings.length];
         
        List<int[]> res = new ArrayList<>();
        for(int i = 0; i < buildings.length; i++){
            int[] b = buildings[i];
            Building building = new Building(b[0], b[1], b[2]);
            rights[i] = lefts[i] = building;
        }
        //sort lefts
        Arrays.sort(lefts, (a, b) -> {
            if(a.left != b.left) {
                return Integer.compare(a.left, b.left);
            }
            return Integer.compare(b.height, a.height);
        });
        //sort rights
        Arrays.sort(rights, (a, b) -> {
            if(a.right != b.right) {
                return Integer.compare(a.right, b.right);
            }
            return Integer.compare(a.height, b.height);
        });
        
        TreeSet<Building> set = new TreeSet<>();
        set.add(new Building(0, Integer.MAX_VALUE, 0));
        int prev = 0;
        //将地平线加入堆中
        int r = 0;
        for(int left = 0; left < lefts.length; left++){
            Building b = lefts[left];
            if(b.left < rights[r].right) { //means into the building
                set.add(b);
                int cur = set.last().height;//如果堆的新顶部和上个keypoint的高度不一样，则加入一个新的keyppint
                if(prev != cur){
                    res.add(new int[]{b.left, cur});
                    prev = cur;
                }
            } else { // means leave building;
                Building ri = rights[r];
                set.remove(rights[r]);
                r++;
                int cur = set.last().height;//如果堆的新顶部和上个keypoint的高度不一样，则加入一个新的keyppint
                if(prev != cur){
                    res.add(new int[]{ri.right, cur});
                    prev = cur;
                }
            }      
        }
        return res;
    }
    
    class Building implements Comparable<Building> {
        int left;
        int right;
        int height;
        public Building(int left, int right, int height) {
            this.left = left;
            this.right = right;
            this.height = height;
        }
        @Override
        public int compareTo(Building o){
            if(this.height != o.height) {
                return Integer.compare(this.height, o.height);
            }
            if(this.left != o.left){
                return Integer.compare(this.left, o.left);
            }
            return Integer.compare(this.right, o.right);
        }
    }
}
