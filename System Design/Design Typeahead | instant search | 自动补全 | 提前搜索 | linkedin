可以从开源的typehead插件来参考，用js写的
http://twitter.github.io/typeahead.js/

场景
必要功能：
Average latency < 100ms
95% < 50ms
所以延迟很重要

用什么算法？

m = average length of word
n = number of words
可以binary search tree或者 trie
  in
be  of 
复杂度lgn + k

Trie:
时间复杂度：O(length(word) + k)
空间复杂度O(m*n*26)

数据库怎么写前缀匹配：
可以针对前缀做索引，用

架构：
要和浏览器结合
Aggregator -> global randing -> personnalized raning

多级缓存 服务器cache, 浏览器cache
再做高频词

例子： facebook
global raning是一样的。

相似度大于1的好友，并且排序
用counter统计好友数就行了
怎么加速这个算法

怎么更快？
核心是每次找最小，遇到相同就跳一下 

用户要top10，从数据库拿top1000，这样下次用户想找的时候，本地可能有

What's the case for linkedin?
Inverted Index倒排索引
从前4个字母开始查后面的数据
用bloom filter来确定是否不在里面

最后都merge到一块去

