Design WhatsApp

1 Senario
基本功能：
  用户登录注册 
   通讯录 Contacts
   两个用户互发消息 One to one conversation
   群聊 Group chat
   用户在线状态
其他功能：
    历史消息
    多机登录 Mutli Devices

2 设计多大数据量的系统 scope, 
 1B月活跃用户
 75%日活跃/月活跃
 约750M日活跃用户
为了计算方便起见，我们来设计一个100M日活跃的WhatsApp


QPS:
  假设平均一个用户每天发20条信息，每个信息50Bytes，每天发1k bytes
  每个message * 100 bytes
  DailyActiveUser is 500m
  500m*20message*100bytes/10000 =~ 20m
  每天硬盘增长2TB/day
  1000bytes = k
  1000k = 1G
  1000G = T
  2Tb/day * 356 * 5 = 3500 TB  
            350
  
  对数据库来说 Average QPS = 100M * 20 / 86400 ~= 20k
  Peak QPS = 20k * 5 = 100k
  
  
存储：
  假设平均一个用户每天发10条信息
  一天需要发1B,每条记录约30bytes的话，大概需要30G的存储
  
Service服务
    Message Service
      负责信息管理
    RealTime Service
      负责实时信息推送给接受者


Storage 这2个是聊天系统中最重要的两条表
  Message Table(NoSQL)
    数据量很大，不需要修改，一条聊天信息就像一条Log一样
    MessageId
    ThreadId
    UserId
    content
    createdTime
    
  THread Table(SQL)   对话表 
    需要同时 index by
      Owner User Id
      Thread Id
      Participants hash
      Updated time
    
      UserId
      ThreadId   createUserId+timestamp 为啥不用递增id，因为我要sharding
      ParticipantId
      ParticipantHash  avoid duplicate thread
      createdAt
      updatedAt
    NoSql对multi indexes的支持并不是很好
    
 Work Solution 可行解
 用户如何发送消息？
    Client把消息和接受者信息发送给Server
    Server为每个接受者（包括发送者自己）创建一条Thread(如果没有的话)
    创建一条Message(with threadId)
用户如何接收消息？
    可以每隔10秒钟问服务器要一下最新的Inbox
    如果有新消息就提示用户
    
How to Sacle?
    Message是NoSQL,自带scale属性
    Thread按照UserId进行sharding 因为需要根据参加者来搜索Thread

Socket
  新的Service Push Service
  Push Service 提供Socket连接服务，可以与Client保持TCP的长连接
  当用户打开APP之后，就连接上Push Service中一个属于自己的socket
  当有人发消息的时候，Message Service收到消息， 通过Push Service把消息发出去
  如果一个 用户长时期不活跃（比如10分钟），可以断开连接，释放掉网络端口
  断开连接之后，如何收到新消息？
      打开App时主动Pull + Android GCM/IOS APNS
  Socket链接与HTTP链接的最主要区别是：
    HTTP链接下，只能客户端问服务器要数据
    Socket连接下，服务器可以主动推送数据给客户端
 只要打开手机，就会和push server进行长连接，所以是实时的
 
 为什么Push Service一台机器是不够的？
 因为端口有限。Whatsup 有那么多用户，但是不一定同时有那么多手机在线
 Push Service是sharding by userId
 
 问题
    假如一个群有500人
    如果不做任何优化，需要给这500人一个个发消息
    但实际上500人里只有很少的一些人在线（比如10人）
    但Message Service任然会尝试给他们发消息
        Message Service(web server)无法知道用户和Push Server的socket连接是否已经断开
        至于Push Server自己才知道
    消息到了Push Server才发现490个人根本没连上
    Message Service与Push Server之间白浪费490次消息传递

 解决：
    增加一个Channel Service(频道服务)
    为每个聊天的Thread增加一个Channel信息
    对于较大群，在线用户先需要订阅到对应的Channel上
        用户上线时，Web Server（message service）找到用户所属的频道，并通知Cannel Service
        
    Channel Service放在内存里就行，数据重要性不高，挂了就重启

How to check online status
Update online status包含两个部分
    服务器需要知道谁在线谁不在线
    用户需要知道我的哪些好友在线
    
告诉服务器我来了 / 我走了
• 用户上线之后，每隔3-5秒向服务器heart beat一次
服务器告诉好友我来了 / 我走了
• 在线的好友，每隔3-5秒钟问服务器要一次大家的在线状态
综合上述
• 每隔10秒告诉服务器我还在，并要一下自己好友的在线状态
• 服务器超过1分钟没有收到信息，就认为已经下线
可以打开你的 Facebook Messenger 验证一下
• 打开 console 点击 network
• 大概每隔3-5秒会pull一次服务器
Facebook用的是pull，pull稳定性更高

Push可以加速，但是不稳定
在线信息不需要非常准确

刚上线，怎么从Pull mordern 转移到Push Modern
