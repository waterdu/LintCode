Design WhatsApp

1 Senario
基本功能：
  用户登录注册
   通讯录
   两个用户互发消息
   群聊
   用户在线状态
其他功能：
    历史消息
    多机登录 Mutli Devices

2 设计多大数据量的系统
 1B月活跃用户
 75%日活跃/月活跃
 约750M日活跃用户
为了计算方便起见，我们来设计一个100M日活跃的WhatsApp
QPS:
  假设平均一个用户每天发20条信息
  Average QPS = 100M * 20 / 86400 ~ 20k
  Peak QPS = 20k * 5 = 100k
存储：
  假设平均一个用户每天发10条信息
  一天需要发1B,每条记录约30bytes的话，大概需要30G的存储
  
Service服务
    Message Service
      负责信息管理
    RealTime Service
      负责实时信息推送给接受者


Storage 这2个是聊天系统中最重要的两条表
  Message Table(NoSQL)
    数据量很大，不需要修改，一条聊天信息就像一条Log一样
    MessageId
    ThreadId
    UserId
    content
    createdAt
    
  THread Table(SQL)   对话表 
    需要同时 index by
      Owner User Id
      Thread Id
      Participants hash
      Updated time
    
      UserId
      ThreadId   createUserId+timestamp 为啥不用递增id，因为我要sharding
      ParticipantId
      ParticipantHash  avoid duplicate thread
      createdAt
      updatedAt
    NoSql对multi indexes的支持并不是很好
    
 Work Solution 可行解
 用户如何发送消息？
    Client把消息和接受者信息发送给Server
    Server为每个接受者（包括发送者自己）创建一条Thread(如果没有的话)
    创建一条Message(with threadId)
用户如何接收消息？
    可以每隔10秒钟问服务器要一下最新的Inbox
    如果有新消息就提示用户
    
How to Sacle?
    Message是NoSQL,自带scale属性
    Thread按照UserId进行sharding 因为需要根据参加者来搜索Thread

Socket
  新的Service Push Service
  Push Service 提供Socket连接服务，可以与Client保持TCP的长连接
  当用户打开APP之后，就连接上Push Service中一个属于自己的socket
  当有人发消息的时候，Message Service收到消息， 通过Push Service把消息发出去
  如果一个 用户长时期不活跃（比如10分钟），可以断开连接，释放掉网络端口
  断开连接之后，如何收到新消息？
      打开App时主动Pull + Android GCM/IOS APNS
  Socket链接与HTTP链接的最主要区别是：
    HTTP链接下，只能客户端问服务器要数据
    Socket连接下，服务器可以主动推送数据给客户端
