//given a list of non-negative numbers and a target integer k, write a function to check if the array has
// a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer
Example 1:
Input:[23,2,4,6,7], k = 6
Output:True
Because [2,4] is a continuous subarray of size 2 and sums up to 6

Example 2:
input:[23,2,6,4,7], k = 6
Output: True;
Explanation:because [23,2,6,4,7] is an continuous subarray of size 5 and sums up to 42

public boolean checkSubarraySum(int[] nums, int k) {
  //key is sum, value is index
  Map<Integer, Integer> map = new HashMap<>();
  map.put(0, -1);//解决了0到i正好得到k的情况
  int preSum = 0;
  for(int i = 0; i < nums.length; i++) {
    preSum += nums[i];
    if(k != 0) {
      preSum %= k;
    }
    
    Integer prev = map.get(preSum);
    if (prev == null) {
      map.put(preSum, i);
      continue;
    }
    if(i - prev > 1) {
       return true;
    }
  }

}
