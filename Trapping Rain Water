class Solution {
    public int trap(int[] height) {
        int l = 0;
        int r = height.length - 1;
        int res = 0;
        int leftMax = 0;
        int rightMax = 0;
        while(l <= r) {
            if(leftMax < rightMax) {
                if(height[l] >= leftMax) {
                    leftMax = height[l];
                } else {
                    res+= leftMax - height[l];
                }
                l++;
                continue;
            } 
            
            if(height[r] >= rightMax) {
                 rightMax = height[r];
            } else {
                res+= rightMax - height[r];
            }
            r--;
        }
        
        return res;
    }
}

//解法2
public class Solution {
    public int trap(int[] height) {
        if (height == null || height.length == 0){
            return 0;
        }
        int left = 0;
        int right = height.length - 1;
        int leftH = height[left];
        int rightH = height[right];
        int sum = 0;
        while(left < right){
            if (leftH < rightH){
                left++;
                if(leftH > height[left]){
                    sum = leftH - height[left] + sum; 
                } else {
                    leftH = height[left];
                }
            } else {
                right--;
                if(rightH > height[right]){
                    sum = rightH - height[right] + sum;
                } else {
                    rightH = height[right];
                }
            }
        }
        return sum;
    }
}
