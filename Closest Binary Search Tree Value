Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Note:

Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.

def closestValue(root, target):
    if not root:
        return 0
    self.res = root.val
    def dfs(root, target):
        if not root:
            return 0
        if abs(target - self.res) > abs(target - root.val):
            self.res = root.val
        if target > root.val:
            dfs(root.right, target)
        elif target < root.val
            dfs(root.left, target)
        else:
            return root.val
    dfs(root, target)
    return self.res

//java解法
class Solution {
    public int closestValue(TreeNode root, double target) {
        int result = root.val;
        while (root != null) {
            if(Math.abs(target - root.val)) < Math.abs(target - result)) {//it's not closet
                result = root.val;
            }
            root = root.val > target? root.left: root.right;
        }
        return result;
    }
}

//分治法解法
class Solution {
    public int closestValue(TreeNode root, double target) {
        int res = 0;
        helper(root, target, Double.MAX_VALUE, res);
        return res;
    }
    
    private void helper(TreeNode root, double target, double diff, int res) {
        if(root == null) {
            return;
        }
        if (diff >= Math.abs(root.val - target)) {
            diff = Math.abs(root.val - target);
            res = root.val;
        }
        helper(root.left, target, diff, res);
        helper(root.right, target, diff, res);
    }
}
