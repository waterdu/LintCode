Implement a method to perform basic string compression using the counts of repeated characters. For example, the string aabcccccaaa would become a2b1c5a3.

If the "compressed" string would not become smaller than the original string, your method should return the original string.

Example
str=aabcccccaaa return a2b1c5a3
str=aabbcc return aabbcc
str=aaaa return a4

Given an array of characters, compress it in-place.

The length after compression must always be smaller than or equal to the original array.

Every element of the array should be a character (not int) of length 1.

After you are done modifying the input array in-place, return the new length of the array.

 
Follow up:
Could you solve it using only O(1) extra space?

 
Example 1:

Input:
["a","a","b","b","c","c","c"]

Output:
Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]

Explanation:
"aa" is replaced by "a2". "bb" is replaced by "b2". "ccc" is replaced by "c3".

class Solution:
    def compress(self, chars):
        """
        :type chars: List[str]
        :rtype: int
        """
        n = len(chars)
        index = 0
        indexAns = 0
        while index < n:
            current = chars[index]
            count = 0
            while index < n and chars[index] == current:
                count += 1
                index+=1
            # make the in place change
            chars[indexAns] = current
            indexAns += 1
            if count != 1:
                numberStr = str(count)
                for c in numberStr:
                    chars[indexAns] = c
                    indexAns += 1
        return indexAns  

//解法2


class Solution:
    """
    @param originalString: a string
    @return: a compressed string
    """
    def compress(self, originalString):
        # write your code here
        if not originalString or len(originalString) <= 2:
            return originalString
        res = ""
        count = 1
        for i in range(1, len(originalString)):
            if originalString[i] != originalString[i - 1]:
                res = res + originalString[i - 1] + str(count)
                count = 1
            else:
                count = count + 1
                
        if originalString[-1] != originalString[-2]:
            res = res + originalString[-1] + "1"
        else:
            res = res + originalString[-1] + str(count)
        
        if len(res) < len(originalString):
            return res
        return originalString
        return res
