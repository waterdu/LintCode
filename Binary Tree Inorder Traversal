/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> result = new ArrayList<>();
        if(root == null) {
            return result;
        }
        dfs(root, result);
        return result;
    }
    
    private void dfs(TreeNode root, ArrayList<Integer> result) {
        if(root == null) {
            return;
        }
        if(root.left != null) {
            dfs(root.left, result);
        }
        result.add(root.val);
        if(root.right != null) {
            dfs(root.right, result);
        }
    }
}
//分治解法
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> result = new ArrayList<>();
        if(root == null) {
            return result;
        }
        //divide
        List<Integer> left = inorderTraversal(root.left);
        List<Integer> right = inorderTraversal(root.right);
        
        //Conquer
        result.addAll(left);
        result.add(root.val);
        result.addAll(right);
        return result;
    }    
}


//Iteration 解法,要背会
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> result = new ArrayList<>();
        if(root == null) {
            return result;
        }
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode current = root;
        while(current != null || !stack.empty()) {
            //insert all left node to stack
            while(current != null) {
                stack.add(current);
                current = current.left;
            }
            current = stack.pop();
            result.add(current.val);
            current = current.right;
        }
        
        return result;
    }    
}
