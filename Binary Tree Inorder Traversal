/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        self.dfs(root,res)
        return res
    def dfs(self, root, res):
        if not root:
            return
        if root.left:
            self.dfs(root.left,res)
        res.append(root.val)
        if root.right:
            self.dfs(root.right,res)
            
//翻译成stack解法, 巧妙点在于啥时候加value，啥时候加node
class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """

        res = []
        if not root:
            return res
        # 0 means node, 1 means value
        stack = [[root, 0]]
        self.dfs(stack,res)
        return res
    #[1,2,3] [3,1,2]
    def dfs(self, stack, res):
        while stack:
            cur = stack.pop()
            node = cur[0]
            if cur[1] == 0:
                if node.right:
                    stack.append((node.right, 0))
                stack.append((node.val, 1))
                if node.left:
                    stack.append((node.left, 0))
            # cur is a value
            else:
                res.append(cur[0])

            
//java解法
 
class Solution {
    //inorder means left root right
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        dfs(res, root);
        return res;
    }
    private void dfs(List<Integer> res, TreeNode root) {
        if(root == null) {
            return;
        }
        dfs(res, root.left);
        res.add(root.val);
        dfs(res, root.right);
    }
}
//分治解法
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> result = new ArrayList<>();
        if(root == null) {
            return result;
        }
        //divide
        List<Integer> left = inorderTraversal(root.left);
        List<Integer> right = inorderTraversal(root.right);
        
        //Conquer
        result.addAll(left);
        result.add(root.val);
        result.addAll(right);
        return result;
    }    
}


//Iteration 解法,要背会
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if(root == null) {
            return result;
        }
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode current = root;
        while(current != null || !stack.empty()) {
            //insert all left node to stack
            while(current != null) {
                stack.add(current);
                current = current.left;
            }
            current = stack.pop();
            result.add(current.val);
            current = current.right;
        }
        
        return result;
    }    
}
