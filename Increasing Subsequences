Given an integer array, your task is to find all the different possible increasing subsequences of the given array, 
and the length of an increasing subsequence should be at least 2 .

Example:
Input: [4, 6, 7, 7]
Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]
Note:
The length of the given array will not exceed 15.
The range of integer in the given array is [-100,100].
The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.

class Solution(object):
    def findSubsequences(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []
        n = len(nums)
        def dfs(l, index):
            if len(l) > 1:
                res.append(list(l))
            visited = set()
            for i in range(index, n):
                if nums[i] in visited:
                    continue
                if len(l) == 0 or l[-1] <= nums[i]: # should use <=, check example
                    l.append(nums[i])
                    visited.add(nums[i])
                    dfs(l, i + 1)
                    l.pop()
          
        dfs([], 0)
        return res
