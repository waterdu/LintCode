Given an interval list which are flying and landing time of the flight. How many airplanes are on the sky at most?
If landing and flying happens at the same time, we consider landing should happen at first.

Example
For interval list

[
  (1,10),
  (2,3),
  (5,8),
  (4,7)
]
Return 3

"""
Definition of Interval.
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""

class Solution:
    """
    @param airplanes: An interval array
    @return: Count of airplanes are in the sky.
    """
    def countOfAirplanes(self, airplanes):
        # write your code here
        points = []
        for a in airplanes:
            points.append((a.start, 1))
            points.append((a.end, -1))
        
        inSky = 0
        atmost = 0
        for time, fly in sorted(points):
            inSky += fly
            atmost = max(atmost, inSky)
        return atmost


public class Solution {
    /*
     * @param airplanes: An interval array
     * @return: Count of airplanes are in the sky.
     */
    public int countOfAirplanes(List<Interval> airplanes) {
        // write your code here
        int n = airplanes.size();
        int[] starts = new int[n];
        int[] ends = new int[n];
        for (int i = 0; i < n; i++) {
            Interval airplane = airplanes.get(i);
            starts[i] = airplane.start;
            ends[i] = airplane.end;
        }
        Arrays.sort(starts);
        Arrays.sort(ends);
        
        int startIndex = 0, endIndex = 0;
        int count = 0, res = 0;
        while(startIndex < n) {
            if(ends[endIndex] <= starts[startIndex]) {
                count--;//enter end -> landing
                endIndex++;
            } else {
                //enter start- > flying
                count++;
                startIndex++;
                res = Math.max(res, count);
            }
        }
        return res;
    }
}
