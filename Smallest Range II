Given an array A of integers, for each integer A[i] we need to choose either x = -K or x = K, and add x to A[i] (only once).
After this process, we have some array B.
Return the smallest possible difference between the maximum value of B and the minimum value of B.
 
Example 1:

Input: A = [1], K = 0
Output: 0
Explanation: B = [1]
Example 2:

Input: A = [0,10], K = 2
Output: 6
Explanation: B = [2,8]
Example 3:

Input: A = [1,3,6], K = 3
Output: 3
Explanation: B = [4,6,3]
 

Note:

1 <= A.length <= 10000
0 <= A[i] <= 10000
0 <= K <= 10000

class Solution(object):
    def smallestRangeII(self, A, K):
        """
        :type A: List[int]
        :type K: int
        :rtype: int
        """
        if not A:
            return 0
        A.sort()
        res = A[-1] - A[0]
        for i in range(len(A) - 1):
            leftMax = max(A[i] + K, A[-1] - K)
            rightMin = min(A[i + 1] - K, A[0] + K)
            res = min(res, leftMax - rightMin)
        return res
# Sort the vector.
# Assuming there is a point, on the left of the point, all elements add K, 
#on the right of the point, all elements substract K, check each possible point. (a point is between two numbers).
