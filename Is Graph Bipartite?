Given an undirected graph, return true if and only if it is bipartite.

Recall that a graph is bipartite if we can split it's set of nodes into two independent subsets A and B 
such that every edge in the graph has one node in A and another node in B.

The graph is given in the following form: graph[i] is a list of indexes 
j for which the edge between nodes i and j exists.  Each node is an integer between 0 and graph.length - 1.  
There are no self edges or parallel edges: graph[i] does not contain i, and it doesn't contain any element twice.

Example 1:
Input: [[1,3], [0,2], [1,3], [0,2]]
Output: true
Explanation: 
The graph looks like this:
0----1
|    |
|    |
3----2
We can divide the vertices into two groups: {0, 2} and {1, 3}.
Example 2:
Input: [[1,2,3], [0,2], [0,1,3], [0,2]]
Output: false
Explanation: 
The graph looks like this:
0----1
| \  |
|  \ |
3----2
We cannot find a way to divide the set of nodes into two independent subsets.

判断一个无向图是不是二分图。二分图的定义是，可以把一个图划分成两部分，使得图中的每个边的两个定点分别来自这两部分。
染色题
class Solution(object):
    def isBipartite(self, graph):
        color = {}
        def dfs(pos):
            for i in graph[pos]:
                if i in color:
                    if color[i] == color[pos]: 
                        return False
                else:
                    color[i] = 1 - color[pos]
                    if not dfs(i): 
                        return False
            return True
        for i in range(len(graph)):
            if i not in color: 
                color[i] = 0
            if not dfs(i): 
                return False
        return True

//bfs解法
class Solution(object):
    def isBipartite(self, graph):
        n = len(graph)
        colors = [0] * n
        for i in range(n):
            if graph[i] and colors[i] == 0:
                colors[i] = 1
                q = collections.deque([i])
                while q:
                    v = q.popleft()
                    for e in graph[v]:
                        if colors[e] != 0:
                            if colors[e] == colors[v]:
                                return False
                        else:
                            colors[e] = 3 - colors[v]
                            q.append(e)
        return True
                

