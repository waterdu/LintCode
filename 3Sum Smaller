Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n 
that satisfy the condition nums[i] + nums[j] + nums[k] < target.

For example, given nums = [-2, 0, 1, 3], and target = 2.

Return 2. Because there are two triplets which sums are less than 2:

[-2, 0, 1]
[-2, 0, 3]
Follow up:
Could you solve it in O(n2) runtime?
和三角题一样,这里要return一共有几个

def threeSumSmaller(nums, target):
  if not nums or len(nums) < 3:
    return 0
  nums.sort()
  n = len(nums)
  res = 0
  for one in range(0,n-1,1):
    two = one + 1
    three = n - 1
    while two < three:
      if nums[one] + nums[two] + nums[three] < target:
        res += three - two
        two+=1
      else:
        three -=1
  return res
