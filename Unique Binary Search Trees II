Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST's shown below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
   class Solution(object):
    def generateTrees(self, n):
        """
        :type n: int
        :rtype: List[TreeNode]
        """
        if not n:
            return []
        return self.genT(1,n)
    def genT(self, start, end):
        res = []
        if start > end:
            res.append(None)
            return res
        if start == end:
            res.append(TreeNode(start))
            return res

        for i in range(start, end + 1, 1):
            left = self.genT(start, i - 1)
            right = self.genT(i + 1, end)
            for nodeL in left:
                for nodeR in right:
                    root = TreeNode(i)
                    root.left = nodeL
                    root.right = nodeR
                    res.append(root)
        return res
    
