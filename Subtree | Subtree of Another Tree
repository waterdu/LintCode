You have two very large binary trees: T1, with millions of nodes, and T2, with hundreds of nodes. Create an algorithm to decide if T2 is a subtree of T1.

Example
Example 1:
T2 is a subtree of T1 in the following case:

       1                3
      / \              / 
T1 = 2   3      T2 =  4
        /
       4
Example 2:
T2 isn't a subtree of T1 in the following case:

       1               3
      / \               \
T1 = 2   3       T2 =    4
        /
       4
Notice
A tree T2 is a subtree of T1 if there exists a node n in T1 such that the subtree of n is identical to T2. 
That is, if you cut off the tree at node n, the two trees would be identical.


class Solution:
    """
    @param T1: The roots of binary tree T1.
    @param T2: The roots of binary tree T2.
    @return: True if T2 is a subtree of T1, or false.
    """
    def isSubtree(self, T1, T2):
        # write your code here
        if not T2:#这里注意先判断T2
            return True
        if not T1:
            return False

        if self.sameTree(T1, T2):
            return True
        return self.isSubtree(T1.left, T2) or self.isSubtree(T1.right, T2)
    def sameTree(self, T1, T2):
        if not T1 and not T2:
            return True
        if not T1 or not T2:
            return False
        if T1.val != T2.val:
            return False
        return self.sameTree(T1.left, T2.left) and self.sameTree(T1.right, T2.right)



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if(s == null) {
            return false;
        }
        if(sameTree(s, t)){
            return true;
        }
        return isSubtree(s.left, t) ||  isSubtree(s.right, t);
    }
    
    private boolean sameTree(TreeNode s, TreeNode t) {
        if(s == null && t == null) {
            return true;
        }
        if(s == null || t == null) {
            return false;
        } 
        if(s.val != t.val) {
            return false;
        }
        return sameTree(s.left, t.left) && sameTree(s.right, t.right);
    }
}
