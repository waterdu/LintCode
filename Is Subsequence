Given a string s and a string t, check if s is subsequence of t.
You may assume that there is only lower case English letters in both s and t. 
t is potentially a very long (length ~= 500,000) string, and s is a short string (<=100).
A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) 
of the characters without disturbing the relative positions of the remaining characters. 
(ie, "ace" is a subsequence of "abcde" while "aec" is not).

Example 1:
s = "abc", t = "ahbgdc"

Return true.

Example 2:
s = "axc", t = "ahbgdc"

Return false.

Follow up:
If there are lots of incoming S, say S1, S2, ... , 
Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. 
In this scenario, how would you change your code?
//和index of一样的解法
class Solution(object):
    def isSubsequence(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        if len(s) == 0:
            return True
        indexs = 0
        indext = 0
        while indext < len(t):
            if s[indexs] == t[indext]:
                indexs+=1
                if indexs == len(s):
                    return True
            indext+=1
        return False
        
class Solution {
    public boolean isSubsequence(String s, String t) {
        if(s.length() == 0) {
            return true;
        }
        int indexS = 0, indexT = 0;
        while(indexT < t.length()) {
            if(t.charAt(indexT) == s.charAt(indexS)) {
                indexS++;
                if(indexS == s.length()) {
                    return true;
                }
            } 
            
            indexT++;
        }
        return false;
    }
}

class Solution {
    public boolean isSubsequence(String s, String t) {
        if(s.length() == 0) {
            return true;
        }
        if(t.length() < s.length()) {
            return false;
        }  
        int prev = 0;
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            prev = t.indexOf(c, prev);
            if(prev == -1) {
                return false;
            }
            prev++;
        }
        return true;
    }
}
