
class Solution(object):
    def hammingDistance(self, x, y):
        """
        :type x: int
        :type y: int
        :rtype: int
        """
        
        def hammingWeight(n):
        # write your code here
            count = 0
            while n:
                n &= n -1
                count += 1
            return count
        return hammingWeight(x ^ y)
 // java解法
public class Solution {
    public int hammingDistance(int x, int y) {
        return Integer.bitCount(x ^ y);
    }
}

//how to implement bitCount?
https://tech.liuchao.me/2016/11/count-bits-of-integer/
int bitCount(int n) {
    int count = 0;
    for (int i = 0; i < 32; i++) {
        count += n & 1;
        n >>= 1;
    }
    return count;
}

int bitCount(int n) {
    int count = 0;
    while (n != 0) {
        n &= n - 1;
        count++;
    }
    return count;
}

int bitCount(int n) {
    int count = 0;
    while (n != 0) {
        count += n & 1;
        n >>= 1;
    }
    return count;
}
//python
    def hammingWeight(self, n):
        # write your code here
        count = 0
        while n:
            n &= n -1
            count += 1
        return count
