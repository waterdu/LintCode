Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements that appear twice in this array.

Could you do it without extra space and in O(n) runtime?

Example:
Input:
[4,3,2,7,8,2,3,1]

Output:
[2,3]

class Solution(object):
    def findDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        if not nums:
            return []
        nums.sort()
        res = []
        for i in range(1, len(nums)):
            if nums[i] == nums[i - 1]:
                res.append(nums[i])
        return res
 
 #注意到它给了范围一定在这个区间内，所以index一定固定的，用翻转法
 class Solution(object):
    def findDuplicates(self, nums):
        if not nums:
            return []
        res = []
        #[2,2,1]
        for n in nums:
            ind = abs(n) - 1 # 1
            
            if nums[ind] < 0:
                res.append(abs(n))
            nums[ind] = -nums[ind]
        return res
