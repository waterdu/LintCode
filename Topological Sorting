/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
 * };
 */

"""
Definition for a Directed graph node
class DirectedGraphNode:
    def __init__(self, x):
        self.label = x
        self.neighbors = []
"""


class Solution:
    """
    @param: graph: A list of Directed graph node
    @return: Any topological order for the given graph.
    """
    def topSort(self, graph):
        # write your code here
        indegree = {}
        ans = []
        for g in graph:
            for n in g.neighbors:
                if n not in indegree:
                    indegree[n] = 1 #set one indegree
                else:
                    indegree[n] += 1
        q = []
        for g in graph:
            if g not in indegree:
                q.append(g)
        
        while q:
            cur = q.pop(0);
            ans.append(cur);
            for n in cur.neighbors:
                indegree[n] -= 1
                if indegree[n] == 0:
                    q.append(n)
                    
        #check if there's a cycle
        if len(ans) == len(graph):
            return ans
        
        return []
        

public class Solution {
    /*
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        // write your code here
         ArrayList<DirectedGraphNode> result = new ArrayList<>();
         //node, inDegree
         HashMap<DirectedGraphNode, Integer> map = new HashMap<>();
         //initialize the degree
         for (DirectedGraphNode node:graph) {
             for (DirectedGraphNode neighbor:node.neighbors) {
                 if(map.containsKey(neighbor)) {
                     map.put(neighbor, map.get(neighbor) + 1);
                 } else {
                     map.put(neighbor, 1);
                 }
             }
         }
         
         //get 0 degree node to queue
         Queue<DirectedGraphNode> q = new LinkedList<DirectedGraphNode>();
         for (DirectedGraphNode node:graph) {
             //map would only contain node with degree > 0
             if(!map.containsKey(node)){
                 q.offer(node);
                 result.add(node);
             }
         }
         
         //cut degrees
         while(!q.isEmpty()){
             DirectedGraphNode node = q.poll();
             for (DirectedGraphNode neighbor:node.neighbors){
                 int value = map.get(neighbor) - 1;
                 map.put(neighbor, value);
                 if (value == 0) {
                     result.add(neighbor);
                     q.offer(neighbor);
                 }
             }
         }
         
         //how to check if there's a cycle?
         if(result.size() == graph.size()) {
            return result;
         } 
         return null;
    }
}
