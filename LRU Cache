Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, 
it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

//py写法
class ListNode:
    def __init__(self, k, v):
        self.key = k
        self.val = v
        self.next = None
        self.prev = None

class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.cap = capacity
        self.head = ListNode(0,0)
        self.tail = ListNode(0,0)
        self.head.prev = self.tail
        self.tail.next = self.head
        self.map = {}

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key in self.map:
            n = self.map[key]
            self._remove(n)
            self._add(n)
            return n.val
        return -1
        
        

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: void
        """
        if key in self.map:
            self._remove(self.map[key])

        n = ListNode(key,value)
        self.map[key] = n
        self._add(n)
        
        if len(self.map) > self.cap:
            n = self.tail.next
            del self.map[n.key]
            self._remove(n)
    
    def _add(self, node):
        n = self.head.prev
        n.next = node
        node.prev = n
        node.next = self.head
        self.head.prev = node
    
    def _remove(self, node):
        prev = node.prev
        next = node.next
        prev.next = next
        next.prev = prev


class LRUCache {
    HashMap<Integer, Node> map;
    int capacity, count;
    Node head, tail; // this is dummy head and dummy tail
    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
        head = new Node(0, 0);
        tail = new Node(0, 0);
        head.next = tail;
        tail.pre = head;
        head.pre = null;
        tail.next = null;
        count = 0;
    }
    
    public int get(int key) {
        if(map.get(key) != null) {
            Node node = map.get(key);
            int result = node.value;
            deleteNode(node);//delete and then put it to head, which is most freqently used
            addToHead(node);
            return result;
        }
        return -1;
    }

    public void put(int key, int value) {
        if(map.get(key) != null) {
            Node node = map.get(key);
            node.value = value;
            deleteNode(node);
            addToHead(node);
        } else {
            Node node = new Node(key, value);
            map.put(key, node);
            if (count < capacity) {
                count++;
                addToHead(node);
            } else {
                map.remove(tail.pre.key);
                deleteNode(tail.pre);
                addToHead(node);
            }
        }
    }
    private void deleteNode(Node node) {
        node.pre.next = node.next;
        node.next.pre = node.pre;
    }
    
    private void addToHead(Node node) {
        node.next = head.next;
        node.next.pre = node;
        node.pre = head;
        head.next = node;
    }
    
    class Node {
        int key;
        int value;
        Node pre;
        Node next;

        public Node(int key, int value) {
	    this.key = key;
	    this.value = value;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
