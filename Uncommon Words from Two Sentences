We are given two sentences A and B.  (A sentence is a string of space separated words.  Each word consists only of lowercase letters.)
A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.
Return a list of all uncommon words. 
You may return the list in any order.

Example 1:

Input: A = "this apple is sweet", B = "this apple is sour"
Output: ["sweet","sour"]
Example 2:

Input: A = "apple apple", B = "banana"
Output: ["banana"]
 

Note:

0 <= A.length <= 200
0 <= B.length <= 200
A and B both contain only spaces and lowercase letters.

解法Two steps:
Count words occurrence to a HashMap<string, int> count.
Loop on the hashmap, find words that appears only once.

class Solution(object):
    def uncommonFromSentences(self, A, B):
        """
        :type A: str
        :type B: str
        :rtype: List[str]
        """
        counter = {}
        res = []
        for w in A.split():
            counter[w] = counter.get(w,0) + 1
            
        for w in B.split():
            counter[w] = counter.get(w,0) + 1
        return [w for w in counter if counter[w] == 1]

class Solution(object):
    def uncommonFromSentences(self, A, B):
        """
        :type A: str
        :type B: str
        :rtype: List[str]
        """
        combi = A + " " + B
        l = combi.split()
        counter = collections.Counter(l)
        res = []
        for k,v in counter.items():
            if v == 1:
                res.append(k)
        return res
