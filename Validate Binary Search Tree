Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
A single node tree is a BST
Example
An example:

  2
 / \
1   4
   / \
  3   5
The above binary tree is serialized as {2,1,4,#,#,3,5} (in level order).
//inorder traveral才是最优解
class Solution(object):
    def isValidBST(self, root):        
        self.prev = None
        return self.validate(root)
    
    def validate(self, node):
        if node == None:
            return True
        if not self.validate(node.left):
            return False
        if self.prev and self.prev.val >= node.val:
            return False
        self.prev = node
        return self.validate(node.right)

class Solution:
    """
    @param root: The root of binary tree.
    @return: True if the binary tree is BST, or false
    """
    
    //这个解法实际上有bug， maxvalue和minvalue不能处理好
    def isValidBST(self, root):
        # write your code here
        #
        def dfs(root, maxvalue, minvalue):
            if not root:
                return True
            if root.val <= minvalue:
                return False
            if root.val >= maxvalue:
                return False
                
            return  dfs(root.left, root.val, minvalue) and dfs(root.right, maxvalue, root.val)
        
        return dfs(root, sys.maxint, -sys.maxint)


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBSTwithBound(root, null, null);
    }
    private boolean isValidBSTwithBound(TreeNode root, Integer low, Integer high) {
        if(root == null) {
            return true;
        }
        if(low != null && root.val <= low) {
            return false;
        }
        if(high != null && root.val >= high) {
            return false;
        }
        return isValidBSTwithBound(root.left, low, root.val)
            && isValidBSTwithBound(root.right, root.val, high);
    }
}
