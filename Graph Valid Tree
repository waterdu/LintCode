public class Solution {
    /**
     * @param n an integer
     * @param edges a list of undirected edges
     * @return true if it's a valid tree, or false
     */
    public boolean validTree(int n, int[][] edges) {
        // Write your code here
        int[] nums = new int[n];
        Arrays.fill(nums, -1);
        //union find
        for(int i = 0; i < edges.length; i++){
            int x = find(nums, edges[i][0]);
            int y = find(nums, edges[i][1]);
            if(x == y){//there is a cycle
                return false;
            }
            nums[x] = y;
        }
        return edges.length == n - 1;
    }
    private int find(int nums[], int i){
        if(nums[i] == -1){//-1 is the superfather
            return i;
        }
        return find(nums, nums[i]);
    }
}
