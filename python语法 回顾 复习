参考
https://www.w3schools.com/python/python_sets.asp

字节，用ord('A') = 65

py的string是immutable
如果要用java里stringbuilder的方法
那就用“”.join(list)来操作
比如"".join(reversed("apple"))
reversed得到的是一个iterate list，所以操作过一次以后里面是空。不能操作第二次
可以用format功能：
s = "({})".format("a") 得到
s = '(aaa)'
python有replace()方程
但如果想replace all，要用正则方程
>>> l = "apple"
>>> c = re.sub(r'[aeiou]', '#', l) c
>>> c
'#ppl#'


创建value,index 对list
letters = ['a','b','c']
pairs = [(letter, index ) for index,letter in enumerate(letters)]
//注意enumerate都是index在第一个，也就是(index,value)
print(pairs)
[('a', 0), ('b', 1), ('c', 2)]
//也可以用
pairs = list(zip(letters, range(letters)))

List/array:
创建n size的list
lst = [None] * n

//创建2维数组：
b =[[1 for x in range(n)] for y in range(m)]

创建一个0*0的二维列表：
list = [ [0 for col in range(0)] for row in range(0)]

创建一个5*5，每个数都初始化为0的二维列表：
list = [ [0 for col in range(5)] for row in range(5)]

list用法：
加元素到最后
l.append(e)
把list2并到list1里，改动的是list1
list1.extend(list2),也可以用加号，
如果要写recursion的答案
用res=[]
res.extend(list1)
res.extend(list2)

拷贝一个元素,


python in的复杂度
Here is the summary for in:
list - Average: O(n)
set/dict - Average: O(1), Worst: O(n)

queue的pop写法
l.pop(0) 一定要加index作为变量进去

插入
l.insert(index,e)

Deque在python的写法
import collections 
  
# initializing deque 
de = collections.deque([1,2,3]) 
它有append(), appendleft()
pop(), popleft()




Queue/Dequeue用法：
统一用q = collections.deque([start])来初始化
有append, appendLeft, pop, popLeft 4种方法

数学：
^符号用**表示
开方用math.sqrt(x)

Set:
thisset = {"apple", "banana", "cherry"}
or myset = set(),//注意{}是定义dict，它没有add method

thisset.discard("banana")
Note: If the item to remove does not exist, discard() will NOT raise an error.
thisset.remove("banana")
Note: If the item to remove does not exist, remove() will raise an error.


dict:
mydict = {}
thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)

counter是字典的子类
import collections
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
counter=collections.Counter(a)

Merge dic：
>>> x = {'a':1, 'b': 2}
>>> y = {'b':10, 'c': 11}
>>> z = dict(x.items() + y.items())
>>> z
{'a': 1, 'c': 11, 'b': 10}

PriorityQueue/Heap的写法
heapq.heappush(heap, item)
Push the value item onto the heap, maintaining the heap invariant.

heapq.heappop(heap)
Pop and return the smallest item from the heap, maintaining the heap invariant. 
If the heap is empty, IndexError is raised. To access the smallest item without popping it, use heap[0].

heapq.heapify(x)
Transform list x into a heap, in-place, in linear time.

heapq.nlargest(n, iterable[, key])
heapq.nsmallest(n, iterable[, key])
想自定义比较,传统的解决方案是存储( 优先级，任务) 元组在堆上
pq = [ ]
heappush(pq, (10, task1))
heappush(pq, (5, task2))
heappush(pq, (15, task3))
priority, task = heappop(pq)

Python里没有Treemap
可以用sorted(dic.keys())来获得类似的效果

排序：
r = sorted(l, key = lambda lis:lis[1], reverse=True)
Key = lambda背下来就行
