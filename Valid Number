Validate if a given string can be interpreted as a decimal number.

Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
" -90e3   " => true
" 1e" => false
"e3" => false
" 6e-1" => true
" 99e2.5 " => false
"53.5e93" => true
" --6 " => false
"-+3" => false
"95a54e53" => false

Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:

Numbers 0-9
Exponent - "e"
Positive/negative sign - "+"/"-"
Decimal point - "."
Of course, the context of these characters also matters in the input.

class Solution(object):
    def isNumber(self, s):
        """
        :type s: str
        :rtype: bool
        """
        try:
            num = float(s)
        except:
            return False
        return True
//标准解法
class Solution(object):
    def isNumber(self, s):
        """
        :type s: str
        :rtype: bool
        """
        s = s.strip() # 去除首尾空格
        isDot = False
        isDigit = False
        isE = False
        for i,c in enumerate(s):
            if c == 'e':
                if not isDigit or isE: # can't be dobgle e or leading e
                    return False
                isE = True
                isDigit = False
            elif c.isdecimal():
                isDigit = True
            elif c in "+-":
                if i!=0 and s[i-1]!='e':
                    return False
            elif c == '.':
                if isDot or isE: # 字符 .（小数点）只能出现一次，而且是只能出现在 e 的前面
                    return False
                isDot = True
            else:
                return False
        return len(s) > 0 and isDigit
                    
